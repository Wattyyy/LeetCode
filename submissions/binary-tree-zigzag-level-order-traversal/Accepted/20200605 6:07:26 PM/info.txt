{"id":349320190,"lang":"python3","time":"1 year, 1 month","timestamp":1591348046,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/349320190/","is_pending":"Not Pending","title":"Binary Tree Zigzag Level Order Traversal","memory":"14 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nfrom collections import deque\nclass Solution:\n    def zigzagLevelOrder(self, root):\n        if not root:\n            return []\n        ans = []\n        queue = deque([root])\n        direction = 1\n        while queue:\n            tmp = []\n            nx_queue = deque([])\n            N = len(queue)\n            if direction == 1:\n                for _ in range(N):\n                    node = queue.popleft()\n                    tmp.append(node.val)\n                    if node.left:\n                        nx_queue.append(node.left)\n                    if node.right:\n                        nx_queue.append(node.right)\n            else:\n                for _ in range(N):\n                    node = queue.pop()\n                    tmp.append(node.val)\n                    if node.right:\n                        nx_queue.appendleft(node.right)\n                    if node.left:\n                        nx_queue.appendleft(node.left)\n\n            direction *= -1\n            ans.append(tmp)\n            queue = nx_queue\n            \n        return ans","compare_result":"111111111111111111111111111111111","title_slug":"binary-tree-zigzag-level-order-traversal"}