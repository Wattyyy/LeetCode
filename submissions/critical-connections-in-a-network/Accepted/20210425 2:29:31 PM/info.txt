{"id":484888008,"lang":"python3","time":"2 months, 2 weeks","timestamp":1619328571,"status_display":"Accepted","runtime":"2496 ms","url":"/submissions/detail/484888008/","is_pending":"Not Pending","title":"Critical Connections in a Network","memory":"96.5 MB","code":"from collections import defaultdict\nfrom typing import List\nclass Solution:\n    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:\n        edge_set = {tuple(edge) for edge in connections}\n        graph = defaultdict(list)\n        for u, v in connections:\n            graph[u].append(v)\n            graph[v].append(u)\n        tin = [float('inf')] * n\n        low = [float('inf')] * n\n        visited = [False] * n\n        self.time = 0\n        res = []\n        def dfs(node, par):\n            tin[node] = self.time\n            low[node] = self.time\n            visited[node] = True\n            self.time += 1\n            for child in graph[node]:\n                if child == par:\n                    continue\n                if visited[child]:\n                    low[node] = min(low[node], low[child])\n                else:\n                    dfs(child, node)\n                    low[node] = min(low[node], low[child])\n                    if low[child] > tin[node]:\n                        if (child, node) in edge_set:\n                            res.append([child, node])\n                        else:\n                            res.append([node, child])\n        for v in range(n):\n            if not visited[v]:\n                dfs(v, -1)\n        return res\n\n\n         \n        ","compare_result":"111111111111","title_slug":"critical-connections-in-a-network"}