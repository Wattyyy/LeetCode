{"id":364206697,"lang":"python3","time":"1Â year","timestamp":1594282884,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/364206697/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"14.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nfrom collections import deque\nclass Solution:\n    def widthOfBinaryTree(self, root):\n        if not root:\n            return 0\n        ans = 1\n        queue = deque([(root, 0)])\n        while queue:\n            min_val, max_val = float('inf'), -float('inf')\n            nx = deque([])\n            for node, index in queue:\n                if node.left:\n                    new_idx = index + index\n                    min_val = min(min_val, new_idx)\n                    max_val = max(max_val, new_idx)\n                    nx.append((node.left, new_idx))\n                if node.right:\n                    new_idx = index + index + 1\n                    min_val = min(min_val, new_idx)\n                    max_val = max(max_val, new_idx)\n                    nx.append((node.right, new_idx))\n            ans = max(ans, max_val - min_val + 1)\n            queue = nx\n        return ans\n        \n        \n        \n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree"}