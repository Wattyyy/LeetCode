{"id":312635658,"lang":"python3","time":"1 year, 4 months","timestamp":1584266237,"status_display":"Accepted","runtime":"840 ms","url":"/submissions/detail/312635658/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"13.2 MB","code":"class Solution:\n    def shortestPathBinaryMatrix(self, grid):\n        if grid[0][0] == 1:\n            return -1\n        R, C = len(grid), len(grid[0])\n        path = [[float('inf') for _ in range(C)] for __ in range(R)]\n        path[0][0] = 1\n        queue = [(0, 0)]\n        nx = [(1, 0), (-1, 0), (0, 1), (0, -1),\n                 (1, 1), (1, -1), (-1, 1), (-1, -1)]\n        while queue:\n            y, x = queue.pop(0)\n            for vy, vx in nx:\n                if 0 <= y + vy and y + vy < R and 0 <= x + vx and x + vx < C:\n                    if (grid[y + vy][x + vx] == 0) and (path[y][x] + 1 < path[y + vy][x + vx]):\n                        path[y + vy][x + vx] = path[y][x] + 1\n                        queue.append((y + vy, x + vx))\n        \n        if path[-1][-1] == float('inf'):\n            return -1\n        else:\n            return path[-1][-1]\n            ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix"}