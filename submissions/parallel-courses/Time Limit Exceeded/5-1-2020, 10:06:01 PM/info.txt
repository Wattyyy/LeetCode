{"id":332718145,"lang":"python3","time":"1 year, 2 months","timestamp":1588338361,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/332718145/","is_pending":"Not Pending","title":"Parallel Courses","memory":"N/A","code":"from collections import defaultdict, deque\nclass Solution:\n    def __init__(self):\n        self.ans = 0\n        \n\n    def topological_sort(self, n, graph):\n        in_order = [0 for _ in range(n)]\n        for i in graph:\n            for j in graph[i]:\n                in_order[j] += 1\n        queue = deque([])\n        for i in range(n):\n            if in_order[i] == 0:\n                queue.append(i)\n        cnt = 0\n        while queue:\n            v = queue.popleft()\n            for neighbor in graph[v]:\n                in_order[neighbor] -= 1\n                if in_order[neighbor] == 0:\n                    queue.append(neighbor)\n            cnt += 1\n        if cnt != n:\n            return -1\n        return 1\n\n    \n    def dfs(self, node, count, graph):\n        if not graph[node]:\n            self.ans = max(self.ans, count)\n            return\n        for next_node in graph[node]:\n            self.dfs(next_node, count+1, graph)\n            \n        \n    def minimumSemesters(self, N, relations):\n        graph = defaultdict(list)\n        for u, v in relations:\n            graph[u - 1].append(v - 1)\n        val = self.topological_sort(N, graph)\n        if val == -1:\n            return -1\n        \n        for node in range(N):\n            self.dfs(node, 1, graph)\n        return self.ans\n        ","compare_result":"11100000000000000000000000000000000000","title_slug":"parallel-courses"}