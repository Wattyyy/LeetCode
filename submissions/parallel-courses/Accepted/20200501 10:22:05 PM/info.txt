{"id":332723052,"lang":"python3","time":"1 year, 2 months","timestamp":1588339325,"status_display":"Accepted","runtime":"280 ms","url":"/submissions/detail/332723052/","is_pending":"Not Pending","title":"Parallel Courses","memory":"16.3 MB","code":"from collections import defaultdict, deque\nclass Solution:\n    def topological_sort(self, n, graph):\n        in_order = [0 for _ in range(n)]\n        for i in graph:\n            for j in graph[i]:\n                in_order[j] += 1\n        queue = deque([])\n        for i in range(n):\n            if in_order[i] == 0:\n                queue.append((i, 1))\n        cnt, res = 0, 0\n        while queue:\n            node, val = queue.popleft()\n            res = max(res, val)\n            for neighbor in graph[node]:\n                in_order[neighbor] -= 1\n                if in_order[neighbor] == 0:\n                    queue.append((neighbor, val + 1))\n            cnt += 1\n        if cnt != n:\n            return -1\n        return res        \n        \n    def minimumSemesters(self, N, relations):\n        graph = defaultdict(list)\n        for u, v in relations:\n            graph[u - 1].append(v - 1)\n        res = self.topological_sort(N, graph)\n        if res == -1:\n            return -1\n        return res","compare_result":"11111111111111111111111111111111111111","title_slug":"parallel-courses"}