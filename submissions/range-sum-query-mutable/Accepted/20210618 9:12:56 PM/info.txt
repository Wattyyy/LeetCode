{"id":509684238,"lang":"python3","time":"3 weeks, 4 days","timestamp":1624018376,"status_display":"Accepted","runtime":"2680 ms","url":"/submissions/detail/509684238/","is_pending":"Not Pending","title":"Range Sum Query - Mutable","memory":"33.2 MB","code":"from typing import List\nclass SegSumTree:\n    def __init__(self, arr: List) -> None:\n        self.arr = arr\n        self.tree = [0] * len(arr) * 4\n        self.__build_tree(0, 0, len(self.arr) - 1)\n        return\n    \n\n    def __build_tree(self, node: int, start: int, end: int) -> None:\n        if start == end:\n            self.tree[node] = self.arr[start]\n            return\n\n        mid = (start + end) // 2\n        self.__build_tree(node * 2 + 1, start, mid)\n        self.__build_tree(node * 2 + 2, mid + 1, end)\n        self.tree[node] = self.tree[node * 2 + 1] + self.tree[node * 2 + 2]\n        return\n    \n\n    def range_sum_query(self, node: int, start: int, end: int, l: int, r: int) -> int:\n        if l <= start and end <= r:\n            return self.tree[node]\n\n        if end < l or r < start:\n            return 0\n        \n        mid = (start + end) // 2\n        val1 = self.range_sum_query(node * 2 + 1, start, mid, l, r)\n        val2 = self.range_sum_query(node * 2 + 2, mid + 1, end, l, r)\n        return val1 + val2\n\n\n    def update(self, node: int, start: int, end: int, idx: int, value: int) -> None:\n        if start == end:\n            self.tree[node] = value\n            self.arr[idx] = value\n            return\n        \n        mid = (start + end) // 2\n        if idx <= mid:\n            self.update(node * 2 + 1, start, mid, idx, value)\n        else:\n            self.update(node * 2 + 2, mid + 1, end, idx, value)\n\n        self.tree[node] = self.tree[node * 2 + 1] + self.tree[node * 2 + 2]\n\n\nclass NumArray:\n\n    def __init__(self, nums: List[int]):\n        self.tree = SegSumTree(nums)\n        self.end = len(nums) - 1\n\n    def update(self, index: int, val: int) -> None:\n        self.tree.update(0, 0, self.end, index, val)\n        return \n        \n    def sumRange(self, left: int, right: int) -> int:\n        return self.tree.range_sum_query(0, 0, self.end, left, right)\n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# obj.update(index,val)\n# param_2 = obj.sumRange(left,right)","compare_result":"111111111111111","title_slug":"range-sum-query-mutable"}