{"id":373076464,"lang":"python3","time":"11 months, 2 weeks","timestamp":1596003859,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/373076464/","is_pending":"Not Pending","title":"Task Scheduler","memory":"N/A","code":"from collections import Counter, defaultdict\nimport heapq\n\nclass Solution:\n    def leastInterval(self, tasks, n):\n        if n == 0:\n            return len(tasks)\n        if not tasks:\n            return 0\n\n        ans = 0\n        counter = Counter(tasks)\n        time_dic = defaultdict(int)\n        for task_name in counter.keys():\n            time_dic[task_name] = 0\n        min_heap = []\n        for task_name, cnt in counter.items():\n            heapq.heappush(min_heap, (cnt, task_name))\n\n        flag = True\n        while flag:\n            option = [-1, 'AA']\n            for task_name, time in time_dic.items():\n                if time == 0 and counter[task_name] > option[0]:\n                    option = [counter[task_name], task_name]\n            if option[1] != 'AA':\n                task_name = option[1]\n                time_dic[task_name] += (n + 1)\n                counter[task_name] -= 1\n                \n            # elapse\n            for task_name, time in time_dic.items():\n                if time > 0:\n                    time_dic[task_name] -= 1\n            ans += 1\n            \n            # end judging \n            flag = False\n            if any([remain > 0 for remain in counter.values()]):\n                flag = True\n                        \n        return ans\n\n\n                \n\n            \n\n        ","compare_result":"111111111111111111111111111111111111111111111111111110000000000000000","title_slug":"task-scheduler"}