// https://leetcode.com/problems/task-scheduler

from collections import Counter, defaultdict
import heapq

class Solution:
    def leastInterval(self, tasks, n):
        if n == 0:
            return len(tasks)
        if not tasks:
            return 0

        ans = 0
        counter = Counter(tasks)
        time_dic = defaultdict(int)
        for task_name in counter.keys():
            time_dic[task_name] = 0
        min_heap = []
        for task_name, cnt in counter.items():
            heapq.heappush(min_heap, (cnt, task_name))

        flag = True
        while flag:
            option = [-1, 'AA']
            for task_name, time in time_dic.items():
                if time == 0 and counter[task_name] > option[0]:
                    option = [counter[task_name], task_name]
            if option[1] != 'AA':
                task_name = option[1]
                time_dic[task_name] += (n + 1)
                counter[task_name] -= 1
                
            # elapse
            for task_name, time in time_dic.items():
                if time > 0:
                    time_dic[task_name] -= 1
            ans += 1
            
            # end judging 
            flag = False
            if any([remain > 0 for remain in counter.values()]):
                flag = True
                        
        return ans


                

            

        