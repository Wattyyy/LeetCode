{"id":327396845,"lang":"python3","time":"1 year, 2 months","timestamp":1587338335,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/327396845/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"14.2 MB","code":"class Solution:\n    def search(self, nums, target):\n        N = len(nums)\n        if N == 0:\n            return -1\n        if N == 1:\n            if nums[0] == target:\n                return 0\n            else:\n                return -1\n            \n        \n        def find_rot_idx(l, r):\n            if nums[l] < nums[r]:\n                return 0\n            \n            while l <= r:\n                mid = (l + r) // 2\n                if nums[mid] > nums[mid + 1]:\n                    return mid + 1\n                else:\n                    if nums[l] > nums[mid]:\n                        r = mid - 1\n                    else:\n                        l = mid + 1\n                \n        def search(l, r):\n            while l <= r:\n                mid = (l + r) // 2\n                if nums[mid] == target:\n                    return mid\n                else:\n                    if target < nums[mid]:\n                        r = mid - 1\n                    else:\n                        l = mid + 1\n            return -1\n        \n        \n        \n        rot_idx = find_rot_idx(0, N - 1)\n        \n        if nums[rot_idx] == target:\n            return rot_idx\n        if rot_idx == 0:\n            return search(0, N - 1)\n        if target < nums[0]:\n            return search(rot_idx, N - 1)\n        else:\n            return search(0, rot_idx)\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array"}