// https://leetcode.com/problems/binary-tree-level-order-traversal-ii

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        queue = []
        ans = []
        
        if root is None:
            return ans
        
        queue.append(root)
        ans.append([root.val])
            
        while len(queue)>0:
            tmplst=[]
            # dequeue
            node = queue.pop(0)
            if node.left is not None:
                l = node.left
                tmplst.append(l.val)
                queue.append(l)
            if node.right is not None:
                r = node.right
                tmplst.append(r.val)
                queue.append(r)
            if len(tmplst) != 0:
                ans.append(tmplst)
            
        return sorted(ans, reverse=True)