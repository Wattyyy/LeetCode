{"id":243816749,"lang":"python3","time":"1 year, 12 months","timestamp":1563289250,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/243816749/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal II","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\n        queue = []\n        ans = []\n        \n        if root is None:\n            return ans\n        \n        queue.append(root)\n        ans.append([root.val])\n            \n        while len(queue)>0:\n            tmplst=[]\n            # dequeue\n            node = queue.pop(0)\n            if node.left is not None:\n                l = node.left\n                tmplst.append(l.val)\n                queue.append(l)\n            if node.right is not None:\n                r = node.right\n                tmplst.append(r.val)\n                queue.append(r)\n            if len(tmplst) != 0:\n                ans.append(tmplst)\n            \n        return sorted(ans, reverse=True)","compare_result":"1111111011000000000000000000000001","title_slug":"binary-tree-level-order-traversal-ii"}