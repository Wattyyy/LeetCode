// https://leetcode.com/problems/binary-tree-level-order-traversal-ii

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def solve(self, queue, ans):
        
        next_queue = []
        next_val_list =[]
        
        if len(queue)==0:
            return sorted(ans, reverse=True)
            
        while len(queue)>0:
            node = queue.pop(0)
            if node.left is not None:
                l = node.left
                next_val_list.append(l.val)
                next_queue.append(l)
            if node.right is not None:
                r = node.right
                next_val_list.append(r.val)
                next_queue.append(r)
                
        if len(next_val_list) != 0:
            ans.append(next_val_list)
            
        return self.solve(next_queue, ans)
        
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        queue = []
        ans = []
        if root is None:
            return ans
        
        queue.append(root)
        ans.append([root.val])
                 
        return self.solve(queue, ans)