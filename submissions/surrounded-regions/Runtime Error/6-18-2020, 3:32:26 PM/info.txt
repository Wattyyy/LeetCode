{"id":355221920,"lang":"python3","time":"1 year","timestamp":1592461946,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/355221920/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"N/A","code":"class Solution:\n    def __init__(self):\n        self.flag = False\n\n    def dfs(self, y, x, board):\n        board[y][x] = '△'\n        R, C = len(board), len(board[0])\n        if y == 0 or y == R - 1 or x == 0 or x == C - 1:\n            self.flag = True\n        for ny, nx in [[y + 1, x], [y - 1, x], [y, x + 1], [y, x - 1]]:\n            if 0 <= ny < R and 0 <= nx < C and board[ny][nx] == 'O':\n                self.dfs(ny, nx, board)\n    \n    def dfs2(self, y, x, board):\n        if self.flag:\n            board[y][x] = 'O'\n        else:\n            board[y][x] = 'X'\n        R, C = len(board), len(board[0])\n        for ny, nx in [[y + 1, x], [y - 1, x], [y, x + 1], [y, x - 1]]:\n            if 0 <= ny < R and 0 <= nx < C and board[ny][nx] == '△':\n                self.dfs2(ny, nx, board)\n    \n    \n    \n\n    def solve(self, board):\n        R, C = len(board), len(board[0])\n        for r in range(R):\n            for c in range(C):\n                if board[r][c] == 'X':\n                    continue\n                self.dfs(r, c, board)\n                self.dfs2(r, c, board)\n                self.flag = False\n        return \n\n        ","compare_result":"10000000000000000000000000000000000000000000000000000000000","title_slug":"surrounded-regions"}