{"id":310509046,"lang":"python3","time":"1 year, 4 months","timestamp":1583658119,"status_display":"Accepted","runtime":"268 ms","url":"/submissions/detail/310509046/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"78.6 MB","code":"import sys\nsys.setrecursionlimit(10 ** 6)\n\nclass Solution:\n    def solve(self, board):\n        if not board:\n            return\n        R, C = len(board), len(board[0])\n        self.visited = set()\n        self.no_surrounded = False\n        def dfs(y, x):\n            if y == 0 or y == R - 1 or x == 0 or x == C - 1:\n                self.no_surrounded = True\n            self.visited.add((y, x))\n            nexts = [(y + 1, x), (y - 1, x), (y, x + 1), (y, x - 1)]\n            for ny, nx in nexts:\n                if ((ny, nx) not in self.visited) and (0 <= ny and ny < R and 0 <= nx and nx < C):\n                    if board[ny][nx] == 'O':\n                        dfs(ny, nx)\n\n        for r in range(R):\n            for c in range(C):\n                if board[r][c] == 'O':\n                    dfs(r, c)\n                    if self.no_surrounded:\n                        for y, x in self.visited:\n                            board[y][x] = 'N'\n                    else:\n                        for y, x in self.visited:\n                            board[y][x] = 'X'\n                    self.visited = set()\n                    self.no_surrounded = False\n        \n        for r in range(R):\n            for c in range(C):\n                if board[r][c] == 'N':\n                    board[r][c] = 'O'\n        \n        \n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions"}