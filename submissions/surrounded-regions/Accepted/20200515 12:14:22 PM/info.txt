{"id":339540355,"lang":"python3","time":"1 year, 2 months","timestamp":1589512462,"status_display":"Accepted","runtime":"1984 ms","url":"/submissions/detail/339540355/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"66.3 MB","code":"class Solution:\n    def __init__(self):\n        self.is_surrounded = True\n\n    def dfs(self, y, x, board):\n        if y == 0 or y == len(board) - 1 or x == 0 or x == len(board[0]) - 1:\n            self.is_surrounded = False\n        self.visited.add((y, x))\n        for ny, nx in [(y-1, x), (y+1, x), (y, x-1), (y, x+1)]:\n            if 0 <= ny < len(board) and 0 <= nx < len(board[0]) and board[ny][nx] == 'O' and (ny, nx) not in self.visited:\n                self.dfs(ny, nx, board)\n\n\n    def solve(self, board):\n        if not board:\n            return\n        surrounded = set()\n        R, C = len(board), len(board[0])\n        for y in range(R):\n            for x in range(C):\n                if board[y][x] == 'X':\n                    continue\n                self.visited = set()\n                self.is_surrounded = True\n                self.dfs(y, x, board)\n                if self.is_surrounded:\n                    for r, c in self.visited:\n                        board[r][c] = 'X'\n        return\n                \n    \n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions"}