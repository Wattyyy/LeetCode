// https://leetcode.com/problems/surrounded-regions

class Solution:
    def __init__(self):
        self.is_surrounded = True

    def dfs(self, y, x, board):
        if y == 0 or y == len(board) - 1 or x == 0 or x == len(board[0]) - 1:
            self.is_surrounded = False
        self.visited.add((y, x))
        for ny, nx in [(y-1, x), (y+1, x), (y, x-1), (y, x+1)]:
            if 0 <= ny < len(board) and 0 <= nx < len(board[0]) and board[ny][nx] == 'O' and (ny, nx) not in self.visited:
                self.dfs(ny, nx, board)


    def solve(self, board):
        if not board:
            return
        surrounded = set()
        R, C = len(board), len(board[0])
        for y in range(R):
            for x in range(C):
                if board[y][x] == 'X':
                    continue
                self.visited = set()
                self.is_surrounded = True
                self.dfs(y, x, board)
                if self.is_surrounded:
                    for r, c in self.visited:
                        board[r][c] = 'X'
        return
                
    
        