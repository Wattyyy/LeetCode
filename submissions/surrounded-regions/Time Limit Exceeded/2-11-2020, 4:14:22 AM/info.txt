{"id":302080663,"lang":"python","time":"1 year, 5 months","timestamp":1581362062,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/302080663/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"N/A","code":"from collections import deque\nclass Solution:\n    def solve(self, board):\n        if not board:\n            return\n        \n        R, C = len(board), len(board[0])\n        is_surrounded = True\n        for r in xrange(R):\n            for c in xrange(C):\n                if board[r][c] == \"O\":\n                    queue = deque([(r, c)])\n                    visited = set()\n                    while queue:\n                        y, x = queue.popleft()\n                        visited.add((y, x))\n                        for ny, nx in ((y+1, x), (y-1, x), (y, x+1), (y, x-1)):\n                            if (0 <= ny) and (ny < R) and (0 <= nx) and (nx < C):\n                                if (board[ny][nx] == \"O\") and ((ny, nx) not in visited):\n                                    queue.append((ny, nx))\n                            else:\n                                is_surrounded = False\n                                break\n                    if is_surrounded:\n                        for y, x in visited: board[y][x] = \"X\"\n                    else:\n                        is_surrounded = True","compare_result":"11111111111111111111111111111111111111111111111111111100000","title_slug":"surrounded-regions"}