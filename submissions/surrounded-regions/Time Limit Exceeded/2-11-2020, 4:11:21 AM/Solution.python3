// https://leetcode.com/problems/surrounded-regions

class Solution:
    def solve(self, board):
        if not board:
            return
        
        R, C = len(board), len(board[0])
        is_surrounded = True
        for r in range(R):
            for c in range(C):
                if board[r][c] == "O":
                    queue = [(r, c)]
                    visited = set()
                    while queue:
                        y, x = queue.pop(0)
                        visited.add((y, x))
                        for ny, nx in ((y+1, x), (y-1, x), (y, x+1), (y, x-1)):
                            if (0 <= ny) and (ny < R) and (0 <= nx) and (nx < C):
                                if (board[ny][nx] == "O") and ((ny, nx) not in visited):
                                    queue.append((ny, nx))
                            else:
                                is_surrounded = False
                                break
                    if is_surrounded:
                        for y, x in visited: board[y][x] = "X"
                    else:
                        is_surrounded = True