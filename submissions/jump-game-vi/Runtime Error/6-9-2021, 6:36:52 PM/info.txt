{"id":505358115,"lang":"python3","time":"1Â month","timestamp":1623231412,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/505358115/","is_pending":"Not Pending","title":"Jump Game VI","memory":"N/A","code":"from typing import List\n\nclass TreeNode(object):\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n        self.height = 1\n\n\nclass AVLTree(object):\n    # Function to insert a node\n    def insert_node(self, root, key):\n\n        # Find the correct location and insert the node\n        if not root:\n            return TreeNode(key)\n        elif key < root.key:\n            root.left = self.insert_node(root.left, key)\n        else:\n            root.right = self.insert_node(root.right, key)\n\n        root.height = 1 + max(self.getHeight(root.left),\n                              self.getHeight(root.right))\n\n        # Update the balance factor and balance the tree\n        balanceFactor = self.getBalance(root)\n        if balanceFactor > 1:\n            if key < root.left.key:\n                return self.rightRotate(root)\n            else:\n                root.left = self.leftRotate(root.left)\n                return self.rightRotate(root)\n\n        if balanceFactor < -1:\n            if key > root.right.key:\n                return self.leftRotate(root)\n            else:\n                root.right = self.rightRotate(root.right)\n                return self.leftRotate(root)\n\n        return root\n\n    # Function to delete a node\n    def delete_node(self, root, key):\n\n        # Find the node to be deleted and remove it\n        if not root:\n            return root\n        elif key < root.key:\n            root.left = self.delete_node(root.left, key)\n        elif key > root.key:\n            root.right = self.delete_node(root.right, key)\n        else:\n            if root.left is None:\n                temp = root.right\n                root = None\n                return temp\n            elif root.right is None:\n                temp = root.left\n                root = None\n                return temp\n            temp = self.getMinValueNode(root.right)\n            root.key = temp.key\n            root.right = self.delete_node(root.right,\n                                          temp.key)\n        if root is None:\n            return root\n\n        # Update the balance factor of nodes\n        root.height = 1 + max(self.getHeight(root.left),\n                              self.getHeight(root.right))\n\n        balanceFactor = self.getBalance(root)\n\n        # Balance the tree\n        if balanceFactor > 1:\n            if self.getBalance(root.left) >= 0:\n                return self.rightRotate(root)\n            else:\n                root.left = self.leftRotate(root.left)\n                return self.rightRotate(root)\n        if balanceFactor < -1:\n            if self.getBalance(root.right) <= 0:\n                return self.leftRotate(root)\n            else:\n                root.right = self.rightRotate(root.right)\n                return self.leftRotate(root)\n        return root\n\n    # Function to perform left rotation\n    def leftRotate(self, z):\n        y = z.right\n        T2 = y.left\n        y.left = z\n        z.right = T2\n        z.height = 1 + max(self.getHeight(z.left),\n                           self.getHeight(z.right))\n        y.height = 1 + max(self.getHeight(y.left),\n                           self.getHeight(y.right))\n        return y\n\n    # Function to perform right rotation\n    def rightRotate(self, z):\n        y = z.left\n        T3 = y.right\n        y.right = z\n        z.left = T3\n        z.height = 1 + max(self.getHeight(z.left),\n                           self.getHeight(z.right))\n        y.height = 1 + max(self.getHeight(y.left),\n                           self.getHeight(y.right))\n        return y\n\n    # Get the height of the node\n    def getHeight(self, root):\n        if not root:\n            return 0\n        return root.height\n\n    # Get balance factore of the node\n    def getBalance(self, root):\n        if not root:\n            return 0\n        return self.getHeight(root.left) - self.getHeight(root.right)\n\n    def getMinValueNode(self, root):\n        if root is None or root.left is None:\n            return root\n        return self.getMinValueNode(root.left)\n    \n    def getMaxValueNode(self, root):\n        if root is None or root.right is None:\n            return root\n        return self.getMaxValueNode(root.right)\n    \n        \n\n\n# myTree = AVLTree()\n# root = None\n# nums = [33, 13, 52, 9, 21, 61, 8, 11]\n# for num in nums:\n#     root = myTree.insert_node(root, num)\n# myTree.printHelper(root, \"\", True)\n# key = 13\n# root = myTree.delete_node(root, key)\n# print(\"After Deletion: \")\n# myTree.printHelper(root, \"\", True)\n\n\nclass Solution:\n    def maxResult(self, nums: List[int], k: int) -> int:\n        if k == 1:\n            return sum(nums)\n        if len(nums) == 1:\n            return nums[0]\n\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n\n        avl = AVLTree()\n        root = None\n        root = avl.insert_node(root, dp[0])\n        \n        for i, num in enumerate(nums):\n            if i == 0:\n                continue\n            maxval_node = avl.getMaxValueNode(root)\n            dp[i] = maxval_node.key + num\n\n            if k <= i:\n                root = avl.delete_node(root, dp[i-k])\n            root = avl.insert_node(root, dp[i])\n        \n        return dp[-1]\n            ","compare_result":"10000000000000000000000000000000000000000000000000000000000000000","title_slug":"jump-game-vi"}