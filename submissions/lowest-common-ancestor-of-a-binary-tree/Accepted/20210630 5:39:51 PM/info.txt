{"id":515302744,"lang":"python3","time":"1 week, 6 days","timestamp":1625042391,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/515302744/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"25.2 MB","code":"# Definition for a binary tree node.\nfrom typing import List\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def __init__(self):\n        self.p_list = None\n        self.q_list = None\n        \n    def search(self, node: TreeNode, target: TreeNode , ls: List, flag: bool) -> List:\n        ls.append(node)\n        if node.val == target.val:\n            if flag:\n                self.p_list = ls[:]\n            else:\n                self.q_list = ls[:]\n        else:\n            if node.left:\n                self.search(node.left, target, ls, flag)\n                ls.pop()\n            if node.right:\n                self.search(node.right, target, ls, flag)\n                ls.pop()\n\n            \n        \n    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:\n        self.search(root, p, [], True)\n        self.search(root, q, [], False)\n        ans = self.p_list[0]\n        for i in range( min(len(self.p_list), len(self.q_list)) ):\n            if self.p_list[i].val == self.q_list[i].val:\n                ans = self.p_list[i]\n            else:\n                break\n        return ans        \n        ","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}