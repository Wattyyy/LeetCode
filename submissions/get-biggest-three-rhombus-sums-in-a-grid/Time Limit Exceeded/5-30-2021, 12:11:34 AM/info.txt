{"id":499910658,"lang":"python3","time":"1 month, 2 weeks","timestamp":1622301094,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/499910658/","is_pending":"Not Pending","title":"Get Biggest Three Rhombus Sums in a Grid","memory":"N/A","code":"from typing import List\n\nclass Solution:\n    def helper(self, r, c, i, grid):\n        if i == 0:\n            return grid[r][c]\n\n        cand = set()\n        for dr in range(i+1):\n            dc = i - dr\n            cand.add((r + dr, c + dc))\n            cand.add((r - dr, c + dc))\n            cand.add((r + dr, c - dc))\n            cand.add((r - dr, c - dc))\n\n        R, C = len(grid), len(grid[0])\n        res = 0\n        for nr, nc in cand:\n            if 0 <= nr < R and 0 <= nc < C:\n                res += grid[nr][nc]\n            else:\n                return 0\n        return res\n\n\n    def getBiggestThree(self, grid: List[List[int]]) -> List[int]:\n        R, C = len(grid), len(grid[0])\n        sum_set = set()\n        for r in range(R):\n            for c in range(C):\n                for i in range(min(R, C) // 2 + 1):\n                    res = self.helper(r, c, i, grid)\n                    if res == 0:\n                        continue\n                    else:\n                        sum_set.add(res)\n        \n        sum_set = sorted(list(sum_set), reverse=True)\n        if len(sum_set) == 1:\n            return [sum_set[0]]\n        elif len(sum_set) == 2:\n            return sum_set[:2]\n        else:\n            return sum_set[:3]\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000","title_slug":"get-biggest-three-rhombus-sums-in-a-grid"}