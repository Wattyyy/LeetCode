{"id":301348260,"lang":"python","time":"1 year, 5 months","timestamp":1581176752,"status_display":"Accepted","runtime":"904 ms","url":"/submissions/detail/301348260/","is_pending":"Not Pending","title":"Jump Game IV","memory":"40.9 MB","code":"from collections import defaultdict\nclass Solution:\n    def minJumps(self, arr):\n        N = len(arr)\n        if N==1:\n            return 0\n        if (arr[0] == arr[-1]) or N == 2:\n            return 1\n        if arr[0] == arr[-2]:\n            return 2\n        \n        val2ids = defaultdict(list)\n        for i in range(N):\n            val2ids[arr[i]].append(i)\n        \n        graph = defaultdict(list)\n        for i in range(N):\n            tmp_set = set()\n            if i==0:\n                tmp_set.add(i+1)\n            elif i==N-1:\n                tmp_set.add(i-1)\n            else:\n                tmp_set.add(i+1)\n                tmp_set.add(i-1)\n            for item in val2ids[arr[i]]:\n                tmp_set.add(item)\n            tmp_set.remove(i)\n            graph[i] = list(tmp_set)\n        \n        del val2ids\n        # bfs\n        dist = [float(\"inf\") for _ in range(N)]\n        dist[0] = 0\n        queue = [0]\n        while queue:\n            idx = queue.pop(0)\n            for next_idx in graph[idx]:\n                if dist[idx]+1 < dist[next_idx]:\n                    dist[next_idx] = dist[idx] + 1\n                    queue.append(next_idx)\n        return dist[-1]","compare_result":"11111111111111111111111111","title_slug":"jump-game-iv"}