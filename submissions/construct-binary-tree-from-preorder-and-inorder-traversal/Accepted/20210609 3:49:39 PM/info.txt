{"id":505302543,"lang":"python3","time":"1Â month","timestamp":1623221379,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/505302543/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"19 MB","code":"class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n\n        def array_to_tree(left, right):\n            nonlocal preorder_index\n            # if there are no elements to construct the tree\n            if left > right: return None\n\n            # select the preorder_index element as the root and increment it\n            root_value = preorder[preorder_index]\n            root = TreeNode(root_value)\n\n\n            preorder_index += 1\n\n            # build left and right subtree\n            # excluding inorder_index_map[root_value] element because it's the root\n            root.left = array_to_tree(left, inorder_index_map[root_value] - 1)\n            root.right = array_to_tree(inorder_index_map[root_value] + 1, right)\n\n            return root\n\n        preorder_index = 0\n\n        # build a hashmap to store value -> its index relations\n        inorder_index_map = {}\n        for index, value in enumerate(inorder):\n            inorder_index_map[value] = index\n\n        return array_to_tree(0, len(preorder) - 1)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}