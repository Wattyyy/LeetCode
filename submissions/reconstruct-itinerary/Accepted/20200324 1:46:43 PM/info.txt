{"id":315407287,"lang":"python3","time":"1Â year, 3Â months","timestamp":1585025203,"status_display":"Accepted","runtime":"172 ms","url":"/submissions/detail/315407287/","is_pending":"Not Pending","title":"Reconstruct Itinerary","memory":"13.5 MB","code":"from collections import defaultdict, Counter\nfrom copy import deepcopy\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\nclass Solution:\n    def findItinerary(self, tickets):\n        graph = defaultdict(list)\n        edge_counter = Counter()\n        for f, t in tickets:\n            graph[f].append(t)\n            edge_counter[(f, t)] += 1\n        for key in graph:\n            graph[key] = sorted(graph[key])\n\n        output = []\n        def backtrack(node='JFK', current=['JFK'], i=0):\n            if len(output) == 1:\n                return \n            elif i == len(tickets):\n                output.append(deepcopy(current))\n            else:\n                for nx in graph[node]:\n                    if edge_counter[(node, nx)] > 0:\n                        current.append(nx)\n                        edge_counter[(node, nx)] -= 1\n                        backtrack(nx, current, i+1)\n                        current.pop()\n                        edge_counter[(node, nx)] += 1\n\n        backtrack()\n        return output[0]","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reconstruct-itinerary"}