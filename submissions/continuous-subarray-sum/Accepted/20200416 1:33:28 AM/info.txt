{"id":325227648,"lang":"python3","time":"1 year, 2 months","timestamp":1586968408,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/325227648/","is_pending":"Not Pending","title":"Continuous Subarray Sum","memory":"14.4 MB","code":"from itertools import accumulate\nfrom collections import defaultdict\nclass Solution:\n    def checkSubarraySum(self, nums, k):\n        if len(nums) <= 1:\n            return False\n\n        if k == 0:\n            cum_sum = list(accumulate(nums))\n            cum_sum = [0] + cum_sum\n            sum2idx = defaultdict(list)\n            for i, v in enumerate(cum_sum):\n                sum2idx[v].append(i)\n                if 1 < len(sum2idx[v]) and 1 < (sum2idx[v][-1] - sum2idx[v][0]):\n                    return True\n            return False\n        \n        k = abs(k)\n        cum_mod = list(accumulate(nums))\n        cum_mod = [num % k for num in cum_mod]\n        cum_mod = [0] + cum_mod\n        mod2idx = defaultdict(list)\n        for i, v in enumerate(cum_mod):\n            mod2idx[v].append(i)\n            if (1 < len(mod2idx[v])) and (mod2idx[v][-1] - mod2idx[v][0] > 1):\n                return True\n        return False\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"continuous-subarray-sum"}