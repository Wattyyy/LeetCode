{"id":325221077,"lang":"python3","time":"1 year, 2 months","timestamp":1586967232,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/325221077/","is_pending":"Not Pending","title":"Continuous Subarray Sum","memory":"N/A","code":"from itertools import accumulate\nfrom collections import defaultdict\nclass Solution:\n    def checkSubarraySum(self, nums, k):\n        if k < 0:\n            return False\n        if k == 0 and len(nums) > 1:\n            return True\n        if len(nums) <= 1:\n            return False\n\n        cum_sum = [0] * len(nums)\n        cum_sum[0] = nums[0] % k\n        for i, v in enumerate(nums):\n            if i == 0:\n                continue\n            cum_sum[i] = (cum_sum[i-1] + nums[i]) % k\n        mod2idx = defaultdict(list)\n        for i, v in enumerate(cum_sum):\n            mod2idx[v].append(i)\n            if (1 < len(mod2idx[v])) and (mod2idx[v][-1] - mod2idx[v][0] > 1):\n                return True\n        return False\n","compare_result":"1100011001100110101011111111110001111010011111111111111111111111110000000000011111111111","title_slug":"continuous-subarray-sum"}