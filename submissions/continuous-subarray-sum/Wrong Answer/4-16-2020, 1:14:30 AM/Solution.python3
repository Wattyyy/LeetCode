// https://leetcode.com/problems/continuous-subarray-sum

from itertools import accumulate
from collections import defaultdict
class Solution:
    def checkSubarraySum(self, nums, k):
        if k == 0 and len(nums) > 1:
            return True
        if len(nums) <= 1:
            return False
        k = abs(k)
        cum_sum = [0] * len(nums)
        cum_sum[0] = nums[0] % k
        for i, v in enumerate(nums):
            if i == 0:
                continue
            cum_sum[i] = (cum_sum[i-1] + nums[i]) % k
        mod2idx = defaultdict(list)
        for i, v in enumerate(cum_sum):
            mod2idx[v].append(i)
            if (1 < len(mod2idx[v])) and (mod2idx[v][-1] - mod2idx[v][0] > 1):
                return True
        return False
