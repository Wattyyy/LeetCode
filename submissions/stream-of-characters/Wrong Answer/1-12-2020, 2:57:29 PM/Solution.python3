// https://leetcode.com/problems/stream-of-characters

from collections import defaultdict

class TrieNode:
    def __init__(self):
        self.children_dic = defaultdict(TrieNode)
        self.is_word = False
        
        
class StreamChecker:
    def __init__(self, words):
        self.root = TrieNode()
        for word in words:
            cur = self.root
            for char in word:
                if char not in cur.children_dic.keys():
                    cur.children_dic[char] = TrieNode()
                cur = cur.children_dic[char]
            cur.is_word = True
        self.cur = self.root
        
    def query(self, letter):
        if letter not in self.cur.children_dic.keys():
            self.cur = self.root
            return False
            
        self.cur = self.cur.children_dic[letter]
        if self.cur.is_word:
            # no children
            if not self.cur.children_dic.keys():
                self.cur = self.root
                return True
            else:
                return True
        else:
            # no children
            if not self.cur.children_dic.keys():
                self.cur = self.root
                return False
            else:
                return False
            

# Your StreamChecker object will be instantiated and called as such:
# obj = StreamChecker(words)
# param_1 = obj.query(letter)