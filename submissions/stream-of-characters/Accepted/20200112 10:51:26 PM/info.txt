{"id":293521235,"lang":"python3","time":"1 year, 6 months","timestamp":1578837086,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/293521235/","is_pending":"Not Pending","title":"Stream of Characters","memory":"38.4 MB","code":"from collections import defaultdict, deque\n\nclass TrieNode:\n    __slots__ = [\"children_dic\", \"is_word\"]\n    def __init__(self):\n        self.children_dic = defaultdict(TrieNode)\n        self.is_word = False\n        \n        \nclass StreamChecker:\n    def __init__(self, words):\n        self.root = TrieNode()\n        self.stack = deque([])\n        for word in words:\n            cur = self.root\n            for char in reversed(word):\n                if char not in cur.children_dic.keys():\n                    cur.children_dic[char] = TrieNode()\n                cur = cur.children_dic[char]\n            cur.is_word = True\n        \n    def query(self, letter):\n        self.stack.append(letter)\n        cur = self.root\n        L = len(self.stack)\n        for i in reversed(range(L)):\n            char = self.stack[i]\n            if char not in cur.children_dic.keys():\n                return False\n            else:\n                cur = cur.children_dic[char]\n                if cur.is_word:\n                    return True\n        \n            \n            \n\n# Your StreamChecker object will be instantiated and called as such:\n# obj = StreamChecker(words)\n# param_1 = obj.query(letter)","compare_result":"11111111111111111","title_slug":"stream-of-characters"}