{"id":298737053,"lang":"python3","time":"1 year, 5 months","timestamp":1580393625,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/298737053/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def __init__(self):\n        self.heights = set()\n        \n    def calc_height(self, node, height):\n        if (not node.left) and (not node.right):\n            self.heights.add(height)\n            return\n        if node.left:\n            self.calc_height(node.left, height+1)\n        if node.right:\n            self.calc_height(node.right, height+1)\n        return\n\n    \n    def isBalanced(self, root):\n        if not root:\n            return True\n        self.calc_height(root, 0)\n        diff = abs(max(self.heights) - min(self.heights))\n        if diff <= 1:\n            return True\n        else:\n            return False\n        \n        \n        ","compare_result":"11111100100001001000000000111100000000000000000001111111111111100000000000000000000000000001101100001101100000000000000111111111111110010000100000011000011111111111111000000000000001101100001101100000000000000111100000111111110","title_slug":"balanced-binary-tree"}