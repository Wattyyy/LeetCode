{"id":343899605,"lang":"python3","time":"1 year, 1 month","timestamp":1590304492,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/343899605/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"13.7 MB","code":"# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def add(self, node, val):\n        if node.val < val:\n            if not node.right:\n                node.right = TreeNode(val)\n            else:\n                self.add(node.right, val)\n        else:\n            if not node.left:\n                node.left = TreeNode(val)\n            else:\n                self.add(node.left, val)\n        \n    def bstFromPreorder(self, preorder):\n        root = TreeNode(preorder[0])\n        for i, v in enumerate(preorder):\n            if i == 0:\n                continue\n            self.add(root, v)\n        return root\n\n        \n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal"}