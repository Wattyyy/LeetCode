// https://leetcode.com/problems/number-of-digit-one

class Solution:
    def countDigitOne(self, n):
        str_n = str(n)
        # [num of determined digit][is less than n][num of 1] -> number of x fullfilling contidtions
        dp = [[[0 for _ in range(len(str_n)+1)] for __ in range(2)] for ___ in range(len(str_n))]
        for d in range(0, int(str_n[0])+1):
            max_d = int(str_n[0])
            if d == max_d:
                if d == 1:
                    dp[0][0][1] += 1
                else:
                    dp[0][0][0] += 1
            # less than n
            else:
                if d==1:
                    dp[0][1][1] += 1
                else:
                    dp[0][1][0] += 1
        

        for i in range(1, len(str_n)):
            max_d = int(str_n[i])
            for d in range(0, 10):
                for o in reversed(range(1, len(str_n)+1)):
                    if d == max_d:
                        if d == 1:
                            dp[i][0][o] += dp[i-1][0][o-1]
                        else:
                            dp[i][0][o] += dp[i-1][0][o]
                    elif d < max_d:
                        if d==1:
                            dp[i][1][o] += dp[i-1][0][o-1] + dp[i-1][1][o-1]
                        else:
                            dp[i][1][o] += dp[i-1][0][o] + dp[i-1][1][o]
                    elif max_d < d:
                        if d==1:
                            dp[i][1][o] += dp[i-1][1][o-1]
                        else:
                            dp[i][1][o] += dp[i-1][1][o]

        
        
        ans = 0
        for o in range(1, len(str_n)+1):
            ans += o * dp[-1][0][o] + o * dp[-1][1][o]
        return ans 
        