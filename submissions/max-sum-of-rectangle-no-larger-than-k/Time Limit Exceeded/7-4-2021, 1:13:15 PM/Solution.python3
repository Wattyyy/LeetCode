// https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k

from typing import List


class Solution:
    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:
        R = len(matrix)
        C = len(matrix[0])
        dp = [[0 for _ in range(C)] for __ in range(R)]
        for r in range(R):
            for c in range(C):
                if c == 0:
                    dp[r][c] = matrix[r][c]
                else:
                    dp[r][c] = dp[r][c-1] + matrix[r][c]
        for r in range(1, R):
            for c in range(C):
                dp[r][c] = dp[r-1][c] + dp[r][c]

                
        ans = -float('inf')
        for r1 in range(R):
            for r2 in range(r1, R):
                for c1 in range(C):
                    for c2 in range(c1, C):
                        if r1 == 0 and c1 == 0:
                            val = dp[r2][c2]
                        elif r1 == 0:
                            val = dp[r2][c2] - dp[r2][c1-1]
                        elif c1 == 0:
                            val = dp[r2][c2] - dp[r1-1][c2]
                        else:
                            val = dp[r2][c2] - (dp[r1-1][c2] - dp[r1-1][c1-1]) - (dp[r2][c1-1] - dp[r1-1][c1-1]) - dp[r1-1][c1-1]
                        
                        if val <= k:
                            ans = max(ans, val)
        return ans


