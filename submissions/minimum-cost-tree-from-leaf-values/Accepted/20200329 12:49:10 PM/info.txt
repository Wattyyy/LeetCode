{"id":316973427,"lang":"python3","time":"1 year, 3 months","timestamp":1585453750,"status_display":"Accepted","runtime":"364 ms","url":"/submissions/detail/316973427/","is_pending":"Not Pending","title":"Minimum Cost Tree From Leaf Values","memory":"14.8 MB","code":"from collections import defaultdict\nclass Solution:\n    def mctFromLeafValues(self, arr):\n        # rec(l, r) -> [max_leef, sum_val]\n        memo = defaultdict(int)\n        def rec(l, r):\n            if (l, r) in memo:\n                return memo[(l, r)]\n            elif l == r:\n                memo[(l, r)] = (arr[l], 0)\n                return (arr[l], 0)\n            else:\n                max_leef, min_sum = 0, float('inf')\n                for i in range(l, r):\n                    l_max, l_sum = rec(l, i)\n                    r_max, r_sum = rec(i+1, r)\n                    max_leef = max(max_leef, max(l_max, r_max))\n                    min_sum = min(min_sum, (l_max * r_max) + l_sum + r_sum)\n                memo[(l, r)] = (max_leef, min_sum)\n                return (max_leef, min_sum)\n        \n        ans = rec(0, len(arr)-1)[1]\n        return ans\n                \n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-tree-from-leaf-values"}