{"id":476417787,"lang":"python3","time":"3 months, 1 week","timestamp":1617554412,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/476417787/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"14.8 MB","code":"from collections import deque\nclass MyCircularQueue:\n\n    def __init__(self, k: int):\n        self.deque = deque([], maxlen=k)\n        self.max_size = k\n        \n    def enQueue(self, value: int) -> bool:\n        if len(self.deque) == self.max_size:\n            return False\n        self.deque.append(value)\n        return True\n        \n    def deQueue(self) -> bool:\n        if not self.deque:\n            return False\n        self.deque.popleft()\n        return True\n        \n\n    def Front(self) -> int:\n        if not self.deque:\n            return -1\n        return self.deque[0]\n        \n\n    def Rear(self) -> int:\n        if not self.deque:\n            return -1\n        return self.deque[-1]\n\n    def isEmpty(self) -> bool:\n        return len(self.deque) == 0\n\n    def isFull(self) -> bool:\n        return len(self.deque) == self.max_size\n        \n\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue"}