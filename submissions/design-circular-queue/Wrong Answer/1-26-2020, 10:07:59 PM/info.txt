{"id":297552896,"lang":"python3","time":"1 year, 5 months","timestamp":1580044079,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/297552896/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"N/A","code":"class MyCircularQueue:\n\n    def __init__(self, k):\n        self.queue = []\n        self.max = k\n        self.rear = -1\n        self.front = -1\n        \n        \n    def enQueue(self, value):\n        if len(self.queue) == self.max:\n            return False\n        if not self.queue:\n            self.queue.append(value)\n            self.rear = value\n            self.front = value\n            return True\n        else:\n            self.queue.append(value)\n            self.rear = value\n            return True        \n\n    def deQueue(self):\n        if not self.queue:\n            return False\n        if len(self.queue) == 1:\n            self.queue.pop(-1)\n            self.rear = -1\n            self.front = -1\n            return True\n        else:\n            self.queue.pop(-1)\n            self.rear = self.queue[-1]\n            return True\n\n\n    def Front(self):\n        return self.front\n\n    \n    def Rear(self):\n        return self.rear\n\n    \n    def isEmpty(self):\n        return not self.queue\n        \n\n    def isFull(self):\n        return len(self.queue) == self.max\n        \n\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()","compare_result":"1101010111110000000000000000000000000000000000000000","title_slug":"design-circular-queue"}