{"id":361455147,"lang":"python3","time":"1Â year","timestamp":1593761658,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/361455147/","is_pending":"Not Pending","title":"Prison Cells After N Days","memory":"13.8 MB","code":"from collections import defaultdict\nclass Solution:\n    def prisonAfterNDays(self, cells: List[int], N: int) -> List[int]:\n        state2day, day2state = defaultdict(int), defaultdict(tuple)\n        state2day[tuple(cells)] = 0\n        day2state[0] = tuple(cells)\n        cur = cells[:]\n        d = 1\n        while True:\n            nx = cur[:]\n            for i, v in enumerate(cur):\n                if i == 0 or i == 7:\n                    nx[i] = 0\n                elif (cur[i-1] == cur[i+1] == 0) or (cur[i-1] == cur[i+1] == 1):\n                    nx[i] = 1\n                else:\n                    nx[i] = 0\n            key = tuple(nx)\n            if key in state2day:\n                if N - d < 0:\n                    return list(day2state[N])\n                elif N == d:\n                    return nx\n                else:\n                    min_idx = state2day[key]\n                    days_left = N - d\n                    add = days_left % (d - min_idx)\n                    return list(day2state[min_idx + add])\n\n            else:\n                state2day[key] = d\n                day2state[d] = key\n                cur = nx\n                d += 1\n            \n            \n\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"prison-cells-after-n-days"}