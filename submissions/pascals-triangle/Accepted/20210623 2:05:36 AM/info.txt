{"id":511677814,"lang":"rust","time":"3Â weeks","timestamp":1624381536,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/511677814/","is_pending":"Not Pending","title":"Pascal's Triangle","memory":"2.2 MB","code":"impl Solution {\n    pub fn generate(num_rows: i32) -> Vec<Vec<i32>> {\n        if num_rows == 1 {\n            return vec![vec![1]];\n        }\n        if num_rows == 2 {\n            return vec![vec![1], vec![1,1]] \n        }\n        \n        let mut res = vec![vec![1], vec![1,1]];\n        for i in 2..num_rows {\n            let mut new_vec = Vec::new();\n            let idx = i as usize;\n            for j in 0..res[idx-1].len() {\n                if j == 0 {\n                    new_vec.push(1);\n                }\n                else {\n                    let val = res[idx-1][j-1] + res[idx-1][j];\n                    new_vec.push(val);\n                }\n            }\n            new_vec.push(1);\n            res.push(new_vec.clone());\n        }\n        return res\n    }\n}","compare_result":"11111111111111","title_slug":"pascals-triangle"}