// https://leetcode.com/problems/redundant-connection

class UnionFind():
    def __init__(self, N):
        self.node2par = {i:i for i in range(1, N+1)}
        self.rank = {i:0 for i in range(1, N+1)}
        self.count = N

    def find_par(self, x):
        if self.node2par[x]==x:
            return x
        else:
            x = self.find_par(self.node2par[x])
            return x
    
    def unite(self, x, y):
        x, y = self.find_par(x), self.find_par(y)
        if x==y:
            return -1
        if self.rank[x]<self.rank[y]:
            self.node2par[x] = y
        else:
            self.node2par[y] = x
        if self.rank[x]==self.rank[y]:
            self.rank[x]+=1
        self.count -= 1
        
class Solution:
    def findRedundantConnection(self, edges):
        N = len(edges)
        uf = UnionFind(N)
        for e in edges:
            a, b = e[0], e[1]
            res = uf.unite(a,b)
            if res==-1:
                return e
            