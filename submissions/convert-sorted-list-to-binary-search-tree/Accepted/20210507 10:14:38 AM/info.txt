{"id":489833404,"lang":"python3","time":"2 months, 1 week","timestamp":1620350078,"status_display":"Accepted","runtime":"360 ms","url":"/submissions/detail/489833404/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"20.5 MB","code":"class TreeNode:\n    def __init__(self, val, left=None, right=None, height=1):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.height = height\n\nclass AVLTree:\n    # Function to insert a node\n    def insert_node(self, root, val):\n        if not root:\n            return TreeNode(val)\n        elif val < root.val:\n            root.left = self.insert_node(root.left, val)\n        else:\n            root.right = self.insert_node(root.right, val)\n\n        root.height = 1 + max(self.getHeight(root.left),\n                              self.getHeight(root.right))\n\n        # Update the balance factor and balance the tree\n        balanceFactor = self.getBalance(root)\n        if balanceFactor > 1:\n            if val < root.left.val:\n                return self.rightRotate(root)\n            else:\n                root.left = self.leftRotate(root.left)\n                return self.rightRotate(root)\n\n        if balanceFactor < -1:\n            if val > root.right.val:\n                return self.leftRotate(root)\n            else:\n                root.right = self.rightRotate(root.right)\n                return self.leftRotate(root)\n\n        return root\n\n    # Function to delete a node\n    def delete_node(self, root, val):\n        if not root:\n            return root\n        elif val < root.val:\n            root.left = self.delete_node(root.left, val)\n        elif val > root.val:\n            root.right = self.delete_node(root.right, val)\n        else:\n            if root.left is None:\n                temp = root.right\n                root = None\n                return temp\n            elif root.right is None:\n                temp = root.left\n                root = None\n                return temp\n            temp = self.getMinValueNode(root.right)\n            root.val = temp.val\n            root.right = self.delete_node(root.right,\n                                          temp.val)\n        if root is None:\n            return root\n\n        # Update the balance factor of nodes\n        root.height = 1 + max(self.getHeight(root.left),\n                              self.getHeight(root.right))\n\n        balanceFactor = self.getBalance(root)\n\n        # Balance the tree\n        if balanceFactor > 1:\n            if self.getBalance(root.left) >= 0:\n                return self.rightRotate(root)\n            else:\n                root.left = self.leftRotate(root.left)\n                return self.rightRotate(root)\n        if balanceFactor < -1:\n            if self.getBalance(root.right) <= 0:\n                return self.leftRotate(root)\n            else:\n                root.right = self.rightRotate(root.right)\n                return self.leftRotate(root)\n        return root\n\n    # Function to perform left rotation\n    def leftRotate(self, z):\n        y = z.right\n        T2 = y.left\n        y.left = z\n        z.right = T2\n        z.height = 1 + max(self.getHeight(z.left),\n                           self.getHeight(z.right))\n        y.height = 1 + max(self.getHeight(y.left),\n                           self.getHeight(y.right))\n        return y\n\n    # Function to perform right rotation\n    def rightRotate(self, z):\n        y = z.left\n        T3 = y.right\n        y.right = z\n        z.left = T3\n        z.height = 1 + max(self.getHeight(z.left),\n                           self.getHeight(z.right))\n        y.height = 1 + max(self.getHeight(y.left),\n                           self.getHeight(y.right))\n        return y\n\n    # Get the height of the node\n    def getHeight(self, root):\n        if not root:\n            return 0\n        return root.height\n\n    # Get balance factore of the node\n    def getBalance(self, root):\n        if not root:\n            return 0\n        return self.getHeight(root.left) - self.getHeight(root.right)\n\n    def getMinValueNode(self, root):\n        if root is None or root.left is None:\n            return root\n        return self.getMinValueNode(root.left)\n\n\nclass Solution:\n    def sortedListToBST(self, head: ListNode) -> TreeNode:\n        if not head:\n            return None\n        ptr = head\n        vals = []\n        while ptr:\n            vals.append(ptr.val)\n            ptr = ptr.next\n        \n        myTree = AVLTree()\n        root = None\n        for val in vals:\n            root = myTree.insert_node(root, val)\n        return root\n","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree"}