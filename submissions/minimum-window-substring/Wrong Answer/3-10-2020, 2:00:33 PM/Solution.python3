// https://leetcode.com/problems/minimum-window-substring

from collections import Counter
class Solution:
    def minWindow(self, s, t):
        s_set, t_set = set(s), set(t)
        if len(s_set.intersection(t_set)) != len(t_set):
            return ''
        
        ans = s
        # l -> r
        l, r = -1, len(s)
        s_cnt = Counter(s)
        while True:
            nx_char = s[l + 1]
            if (nx_char in t_set) and (s_cnt[nx_char] - 1 == 0):
                break
            s_cnt[nx_char] -= 1
            l += 1
        while True:
            nx_char = s[r - 1]
            if (nx_char in t_set) and (s_cnt[nx_char] - 1 == 0):
                break
            s_cnt[nx_char] -= 1
            r -= 1
        if len(s[l+1:r]) < len(ans):
            ans = s[l+1:r]
        
        l, r = -1, len(s)
        s_cnt = Counter(s)
        # r -> l
        while True:
            nx_char = s[r - 1]
            if (nx_char in t_set) and (s_cnt[nx_char] - 1 == 0):
                break
            s_cnt[nx_char] -= 1
            r -= 1
        while True:
            nx_char = s[l + 1]
            if (nx_char in t_set) and (s_cnt[nx_char] - 1 == 0):
                break
            s_cnt[nx_char] -= 1
            l += 1
        if len(s[l+1:r]) < len(ans):
            ans = s[l+1:r]
        
        return ans