{"id":364157967,"lang":"python3","time":"1Â year","timestamp":1594274273,"status_display":"Accepted","runtime":"532 ms","url":"/submissions/detail/364157967/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"14.2 MB","code":"from collections import Counter, defaultdict\nclass Solution:\n    def minWindow(self, s, t):\n        # detect corner cases\n        s_cnt, t_cnt = Counter(s), Counter(t)\n        if any( [s_cnt[key] < t_cnt[key] for key in t_cnt.keys()] ):\n            return ''\n        s_cnt = defaultdict(int)\n        lp, rp = -1, 0\n        ans = (-1, -1, float('inf'))\n        while lp <= rp and lp < len(s) and rp < len(s):\n            s_cnt[s[rp]] += 1\n            if all([ val <= s_cnt[key] for key, val in t_cnt.items() ]):\n                while True:\n                    if rp - lp < ans[-1]:\n                        ans = (lp, rp, rp - lp) \n                    nx_char = s[lp + 1]\n                    if (nx_char not in t_cnt) or (nx_char in t_cnt and t_cnt[nx_char] <= s_cnt[nx_char] - 1 ):\n                        lp += 1\n                        s_cnt[s[lp]] -= 1\n                    else:\n                        break\n                if rp - lp < ans[-1]:\n                    ans = (lp, rp, rp - lp) \n\n            rp += 1\n        l, r, length = ans[0], ans[1], ans[2]\n        return s[r - length + 1: r + 1]        \n\n\n\n\n            \n\n\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring"}