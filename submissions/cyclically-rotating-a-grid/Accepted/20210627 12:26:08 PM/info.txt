{"id":513733910,"lang":"python3","time":"2 weeks, 3 days","timestamp":1624764368,"status_display":"Accepted","runtime":"200 ms","url":"/submissions/detail/513733910/","is_pending":"Not Pending","title":"Cyclically Rotating a Grid","memory":"14.4 MB","code":"class Solution:\n    def rotate(self, grid,  i, k):\n        R, C = len(grid), len(grid[0])\n        ls = []\n        for r in range(i, R - i - 1):\n            ls.append(grid[r][i])\n        for c in range(i, C - i - 1):\n            ls.append(grid[R-i-1][c])\n        for r in reversed(range(i + 1, R - i)):\n            ls.append(grid[r][C - i - 1])\n        for c in reversed(range(i + 1, C - i)):\n            ls.append(grid[i][c])\n        \n        L = len(ls)\n        new = [0] * L\n        for x in range(L):\n            idx = (x + k) % L\n            new[idx] += ls[x]\n        idx = 0\n        for r in range(i, R - i - 1):\n            grid[r][i] = new[idx]\n            idx += 1\n        for c in range(i, C - i - 1):\n            grid[R-i-1][c] = new[idx]\n            idx += 1\n        for r in reversed(range(i + 1, R - i)):\n            grid[r][C - i - 1] = new[idx]\n            idx += 1\n        for c in reversed(range(i + 1, C - i)):\n            grid[i][c] = new[idx]\n            idx += 1\n       \n        \n    def rotateGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n        R, C = len(grid), len(grid[0])\n        for i in range(min(R, C) // 2):\n            self.rotate(grid, i, k)\n        return grid\n            \n            \n        \n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"cyclically-rotating-a-grid"}