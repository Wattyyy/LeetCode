{"id":315101337,"lang":"python3","time":"1 year, 3 months","timestamp":1584938538,"status_display":"Accepted","runtime":"612 ms","url":"/submissions/detail/315101337/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"33.2 MB","code":"class UnionFind:\n    def __init__(self, N):\n        self.node2par = {i:i for i in range(N)}\n        self.rank = {i:0 for i in range(N)}\n        self.count = N\n\n    def find_par(self, x):\n        if self.node2par[x] != x:\n            x = self.find_par(self.node2par[x])\n        return x\n\n    def unite(self, x, y):\n        x, y = self.find_par(x), self.find_par(y)\n        if x == y:\n            return\n        if self.rank[x] < self.rank[y]:\n            self.node2par[x] = y\n        else:\n            self.node2par[y] = x\n        if self.rank[x] == self.rank[y]:\n            self.rank[x] += 1\n        self.count -= 1\n\n\nclass Solution:\n    def makeConnected(self, n, connections):\n        uf = UnionFind(n)\n        redundant_edge = 0\n        for u, v in connections:\n            if uf.find_par(u) == uf.find_par(v):\n                redundant_edge += 1\n            else:\n                uf.unite(u, v)\n        isolated = uf.count - 1\n        if redundant_edge < isolated:\n            return -1\n        else:\n            return isolated\n\n        ","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected"}