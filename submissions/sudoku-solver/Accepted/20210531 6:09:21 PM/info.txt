{"id":500767468,"lang":"python3","time":"1 month, 1 week","timestamp":1622452161,"status_display":"Accepted","runtime":"204 ms","url":"/submissions/detail/500767468/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"14.3 MB","code":"from collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def __init__(self) -> None:\n        self.cell = defaultdict(set)\n        self.row = defaultdict(set)\n        self.col = defaultdict(set)\n        self.flag = False\n    \n    def backtrack(self, board, idx):\n        if len(self.empties) == idx:\n            self.flag = True\n            return\n        r, c = self.empties[idx]\n        for d in range(1, 10):\n            if self.flag:\n                return\n            if (d in self.cell[(r // 3, c // 3)]) or (d in self.row[r]) or (d in self.col[c]):\n                continue\n            else:\n                self.cell[(r // 3, c // 3)].add(d)\n                self.row[r].add(d)\n                self.col[c].add(d)\n                board[r][c] = str(d)\n                self.backtrack(board, idx+1)\n                self.cell[(r // 3, c // 3)].remove(d)\n                self.row[r].remove(d)\n                self.col[c].remove(d)\n        \n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        self.empties = []\n        for r in range(9):\n            for c in range(9):\n                if board[r][c] == '.':\n                    self.empties.append((r, c))\n                else:\n                    d = int(board[r][c])\n                    self.cell[(r // 3, c // 3)].add(d)\n                    self.row[r].add(d)\n                    self.col[c].add(d)\n        self.backtrack(board, 0)\n        return\n        \n        ","compare_result":"111111","title_slug":"sudoku-solver"}