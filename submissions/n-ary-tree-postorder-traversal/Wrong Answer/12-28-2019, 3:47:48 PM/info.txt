{"id":289152732,"lang":"python3","time":"1 year, 6 months","timestamp":1577515668,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/289152732/","is_pending":"Not Pending","title":"N-ary Tree Postorder Traversal","memory":"N/A","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\nfrom collections import deque\nclass Solution:\n    def postorder(self, root: 'Node') -> List[int]:\n        if not root:\n            return []\n        st = deque([root])\n        ans = []\n        visited = set()\n        while st:\n            top = st[-1]\n            if top.children:\n                vst_flag = 1\n                tmp = deque([])\n                for child in reversed(top.children):\n                    vst_flag = vst_flag & (child.val not in visited)\n                    if vst_flag == 0:\n                        ans.append(top.val)\n                        visited.add(top.val)\n                        st.pop()\n                        tmp = deque([])\n                        break\n                    tmp.append(child)\n                st = st + tmp    \n            else:\n                ans.append(top.val)\n                visited.add(top.val)\n                st.pop()\n        \n        return ans\n\n\n\n        ","compare_result":"1111110110110000100010111111110111110","title_slug":"n-ary-tree-postorder-traversal"}