// https://leetcode.com/problems/satisfiability-of-equality-equations

class UnionFind:
    def __init__(self):
        self.node2par = {chr(i + 97): chr(i + 97) for i in range(26)}
        self.rank = {chr(i + 97): 0 for i in range(26)}
    
    def find_par(self, node):
        res = self.node2par[node]
        if node == res:
            return node
        else:
            par = self.find_par(res)
            return par
    
    def unite(self, x, y):
        if self.node2par[x] == self.node2par[y]:
            return 
        x, y = self.node2par[x], self.node2par[y]
        if self.rank[x] < self.rank[y]:
            self.node2par[x] = y
        elif self.rank[x] > self.rank[y]:
            self.node2par[y] = x
        else:
            self.node2par[x] = y
            self.rank[x] += 1

class Solution:
    def equationsPossible(self, equations):
        neqs = []
        uf = UnionFind()
        for string in equations:
            if string[1:3] == '==':
                uf.unite(string[0], string[-1])
            else:
                neqs.append(string)
        for string in neqs:
            x, y = string[0], string[-1]
            if uf.find_par(x) == uf.find_par(y):
                return False
        return True
            
        
        
        