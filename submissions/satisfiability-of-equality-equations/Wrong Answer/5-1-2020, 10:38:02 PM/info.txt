{"id":332728102,"lang":"python3","time":"1 year, 2 months","timestamp":1588340282,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/332728102/","is_pending":"Not Pending","title":"Satisfiability of Equality Equations","memory":"N/A","code":"class UnionFind:\n    def __init__(self):\n        self.node2par = {chr(i + 97): chr(i + 97) for i in range(26)}\n        self.node2par['='], self.node2par['!'] = '=', '!'\n    \n    def find_par(self, x):\n        if self.node2par[x] == x:\n            return x\n        par = self.find_par(self.node2par[x])\n        return par\n    \n    def unite_eq(self, x, y):\n        self.node2par[x], self.node2par[y] = '=', '='\n        \nclass Solution:\n    def equationsPossible(self, equations):\n        uf = UnionFind()\n        neqs = []\n        for eq in equations:\n            if eq[1] == '=':\n                uf.unite_eq(eq[0], eq[-1])\n            else:\n                neqs.append(eq)\n        for neq in neqs:\n            if uf.find_par(neq[0]) == uf.find_par(neq[-1]):\n                return False\n        return True\n\n\n        ","compare_result":"1111111111111111101111111110111111111011111111111110011111111001111011111111001111110111111100001000111110111000011100010001001010000010100010000001010010000000011010010011101011011","title_slug":"satisfiability-of-equality-equations"}