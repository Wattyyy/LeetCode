{"id":332086737,"lang":"python3","time":"1 year, 2 months","timestamp":1588216977,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/332086737/","is_pending":"Not Pending","title":"Satisfiability of Equality Equations","memory":"N/A","code":"import sys\nsys.setrecursionlimit(10 ** 6)\n\nclass UnionFind:\n    def __init__(self):\n        self.node2par = {chr(i + 97): chr(i + 97) for i in range(26)}\n        self.rank = {chr(i + 97): 0 for i in range(26)}\n    \n    def find_par(self, node):\n        res = self.node2par[node]\n        if node == res:\n            return node\n        else:\n            par = self.find_par(res)\n            return par\n    \n    def unite(self, x, y):\n        if self.node2par[x] == self.node2par[y]:\n            return \n        x, y = self.node2par[x], self.node2par[y]\n        if self.rank[x] < self.rank[y]:\n            self.node2par[x] = y\n        elif self.rank[x] > self.rank[y]:\n            self.node2par[y] = x\n        else:\n            self.node2par[x] = y\n            self.rank[x] += 1\n\nclass Solution:\n    def equationsPossible(self, equations):\n        neqs = []\n        uf = UnionFind()\n        for string in equations:\n            x, y = string[0], string[-1]\n            if string[1:3] == '==':\n                if uf.find_par(x) != uf.find_par(y):\n                    uf.unite(x, y)\n            else:\n                neqs.append(string)\n        for string in neqs:\n            x, y = string[0], string[-1]\n            if uf.find_par(x) == uf.find_par(y):\n                return False\n        return True\n            \n        \n        \n        ","compare_result":"1111111111111111111111111111111111111110111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"satisfiability-of-equality-equations"}