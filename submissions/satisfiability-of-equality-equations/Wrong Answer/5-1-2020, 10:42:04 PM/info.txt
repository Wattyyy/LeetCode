{"id":332729385,"lang":"python3","time":"1 year, 2 months","timestamp":1588340524,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/332729385/","is_pending":"Not Pending","title":"Satisfiability of Equality Equations","memory":"N/A","code":"class UnionFind:\n    def __init__(self):\n        self.node2par = {chr(i + 97): chr(i + 97) for i in range(26)}\n        \n    def find_par(self, x):\n        if self.node2par[x] == x:\n            return x\n        par = self.find_par(self.node2par[x])\n        return par\n    \n    def unite(self, x, y):\n        x, y == self.find_par(x), self.find_par(y)\n        if x == y:\n            return\n        if x < y:\n            self.node2par[y] = x\n        else:\n            self.node2par[x] = y\n        \nclass Solution:\n    def equationsPossible(self, equations):\n        uf = UnionFind()\n        neqs = []\n        for eq in equations:\n            if eq[1] == '=':\n                uf.unite(eq[0], eq[-1])\n            else:\n                neqs.append(eq)\n        for neq in neqs:\n            if uf.find_par(neq[0]) == uf.find_par(neq[-1]):\n                return False\n        return True\n","compare_result":"1111111111111111111111111111101111111111111111100111111111101111111111111111111111111101101111111111111101111111111111111111111111111111011101111111101111111111110111111111111111111","title_slug":"satisfiability-of-equality-equations"}