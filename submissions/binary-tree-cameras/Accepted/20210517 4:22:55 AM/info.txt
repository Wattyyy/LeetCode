{"id":494103302,"lang":"python3","time":"1 month, 4 weeks","timestamp":1621192975,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/494103302/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"14.7 MB","code":"class Solution(object):\n    def minCameraCover(self, root):\n        def solve(node):\n            # 0: Strict ST; All nodes below this are covered, but not this one\n            # 1: Normal ST; All nodes below and incl this are covered - no camera\n            # 2: Placed camera; All nodes below this are covered, plus camera here\n\n            if not node:\n                return 0, 0, float('inf')\n            L = solve(node.left)\n            R = solve(node.right)\n\n            dp0 = L[1] + R[1]\n            dp1 = min(L[2] + min(R[1:]), R[2] + min(L[1:]))\n            dp2 = 1 + min(L) + min(R)\n\n            return dp0, dp1, dp2\n\n        return min(solve(root)[1:])","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras"}