{"id":346274315,"lang":"python3","time":"1 year, 1 month","timestamp":1590761657,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/346274315/","is_pending":"Not Pending","title":"Course Schedule","memory":"15 MB","code":"from collections import defaultdict, deque\nclass Solution:\n    def topological_sort(self, graph, N):\n        in_degree = [0] * N\n        for i in range(N):\n            for v in graph[i]:\n                in_degree[v] += 1\n        queue = deque([])\n        for i in range(N):\n            if in_degree[i] == 0:\n                queue.append(i)\n        cnt = 0\n        res = []\n        while queue:\n            v = queue.popleft()\n            for nv in graph[v]:\n                in_degree[nv] -= 1\n                if in_degree[nv] == 0:\n                    queue.append(nv)\n            res.append(v)\n            cnt += 1\n        if cnt != N:\n            return []\n        else:\n            return res\n\n    \n    def canFinish(self, numCourses, prerequisites):\n        graph = defaultdict(list)\n        for v, u in prerequisites:\n            graph[u].append(v)\n        res = self.topological_sort(graph, numCourses)\n        return len(res) == numCourses\n        \n        ","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"course-schedule"}