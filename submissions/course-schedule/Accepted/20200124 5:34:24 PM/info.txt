{"id":297003657,"lang":"python3","time":"1 year, 5 months","timestamp":1579854864,"status_display":"Accepted","runtime":"152 ms","url":"/submissions/detail/297003657/","is_pending":"Not Pending","title":"Course Schedule","memory":"14.5 MB","code":"from collections import defaultdict\n\nclass Solution:\n    def isCyclic(self, v, visited, rec_visited): \n        visited[v] = True\n        rec_visited[v] = True\n        for neighbor in self.graph[v]: \n            if rec_visited[neighbor]: \n                return True\n            if (not visited[neighbor]) and self.isCyclic(neighbor, visited, rec_visited):\n                return True\n        rec_visited[v] = False\n        return False\n\n    def canFinish(self, numCourses, prerequisites):\n        if not prerequisites:\n            return True\n        self.graph = defaultdict(list)\n        for i in range(len(prerequisites)):\n            value, key = prerequisites[i]\n            self.graph[key].append(value)\n        visited = [False for _ in range(numCourses)]\n        rec_visited = [False for _ in range(numCourses)]\n        \n        for node in range(numCourses):\n            if (not visited[node]) and (self.isCyclic(node,visited,rec_visited)):\n                return False\n        return True\n\n","compare_result":"111111111111111111111111111111111111111111","title_slug":"course-schedule"}