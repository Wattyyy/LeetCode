{"id":499741898,"lang":"rust","time":"1 month, 2 weeks","timestamp":1622272423,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/499741898/","is_pending":"Not Pending","title":"Maximum Erasure Value","memory":"3.6 MB","code":"use std::collections::HashSet;\nuse std::cmp;\n\nimpl Solution {\n    pub fn maximum_unique_subarray(nums: Vec<i32>) -> i32 {\n        if nums.len() == 1 {\n            return nums[0]\n        }\n        let (mut l, mut r) = (0, 1);\n        let (mut ans, mut tmp) = (nums[0], nums[0]);\n        let mut used = HashSet::with_capacity(nums.len());\n        used.insert(nums[0]);\n        while r < nums.len(){\n            let r_num = nums[r];\n            while used.contains(&r_num){\n                let l_num = nums[l];\n                used.remove(&l_num);\n                tmp -= l_num;\n                l += 1;\n            }\n            used.insert(r_num);\n            tmp += r_num;\n            ans = cmp::max(tmp, ans);\n            r += 1;\n        }\n        return ans\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-erasure-value"}