{"id":499365968,"lang":"rust","time":"1 month, 2 weeks","timestamp":1622192350,"status_display":"Accepted","runtime":"180 ms","url":"/submissions/detail/499365968/","is_pending":"Not Pending","title":"Maximum Product of Word Lengths","memory":"2.3 MB","code":"use std::collections::HashMap;\nuse std::cmp;\n\nimpl Solution {\n    pub fn max_product(words: Vec<String>) -> i32 {\n        let mut map: HashMap<String, u32> = HashMap::new();\n        \n        for word in words.iter(){\n            let mut bit:u32 = 0;\n            for c in word.chars(){\n                let mut v = c as u32;\n                v = u32::pow(2, v - 97);\n                bit |= v;\n            }\n            map.insert(word.to_string(), bit);\n        }\n        \n        let mut res:u32 = 0;\n        let length = words.len();\n        for l in 0..length{\n            for r in l+1..length{\n                let w1 = &words[l];\n                let w2 = &words[r];\n                let bit1 = map[w1];\n                let bit2 = map[w2];\n                if bit1 & bit2 == 0 {\n                    res = cmp::max(res, (w1.len() as u32) * (w2.len() as u32));\n                }\n            }\n        }\n        res as i32\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-word-lengths"}