{"id":289466908,"lang":"python3","time":"1 year, 6 months","timestamp":1577618102,"status_display":"Accepted","runtime":"196 ms","url":"/submissions/detail/289466908/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"30 MB","code":"class TrieNode:\n    def __init__(self):\n        self.isWord = False\n        # Hash[char] = TrieNode    \n        self.childrenMap = {}\n\nclass Trie(TrieNode):\n\n    def __init__(self):\n        self.root = TrieNode()       \n\n        \n    def insert(self, word):\n        cur = self.root\n        for i in range(len(word)):\n            char = word[i]\n            if char not in cur.childrenMap.keys():\n                cur.childrenMap[char] = TrieNode()\n            cur = cur.childrenMap[char]\n        cur.isWord = True\n        \n\n    def search(self, word):\n        cur = self.root\n        for i in range(len(word)):\n            char = word[i]\n            if char not in cur.childrenMap.keys():\n                return False\n            cur = cur.childrenMap[char]\n        return cur.isWord\n\n    \n    def startsWith(self, prefix):\n        cur = self.root\n        for i in range(len(prefix)):\n            char = prefix[i]\n            if char not in cur.childrenMap.keys():\n                return False\n            cur = cur.childrenMap[char]\n        return True\n\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}