// https://leetcode.com/problems/implement-trie-prefix-tree

from collections import defaultdict

class TrieNode:
    def __init__(self):
        self.isWord = False
        self.childrenMap = defaultdict(TrieNode)

        
class Trie(TrieNode):
    def __init__(self):
        self.root = TrieNode()       

        
    def insert(self, word):
        cur = self.root
        for i in range(len(word)):
            char = word[i]
            cur = cur.childrenMap[char]
        cur.isWord = True
        

    def search(self, word):
        cur = self.root
        for i in range(len(word)):
            char = word[i]
            if char not in cur.childrenMap.keys():
                return False
            cur = cur.childrenMap[char]
        return cur.isWord

    
    def startsWith(self, prefix):
        cur = self.root
        for i in range(len(prefix)):
            char = prefix[i]
            if char not in cur.childrenMap.keys():
                return False
            cur = cur.childrenMap[char]
        return True