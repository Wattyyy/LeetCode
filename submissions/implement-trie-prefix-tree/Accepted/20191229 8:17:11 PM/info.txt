{"id":289467126,"lang":"python3","time":"1 year, 6 months","timestamp":1577618231,"status_display":"Accepted","runtime":"188 ms","url":"/submissions/detail/289467126/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"31.6 MB","code":"from collections import defaultdict\n\nclass TrieNode:\n    def __init__(self):\n        self.isWord = False\n        self.childrenMap = defaultdict(TrieNode)\n\n        \nclass Trie(TrieNode):\n    def __init__(self):\n        self.root = TrieNode()       \n\n        \n    def insert(self, word):\n        cur = self.root\n        for i in range(len(word)):\n            char = word[i]\n            cur = cur.childrenMap[char]\n        cur.isWord = True\n        \n\n    def search(self, word):\n        cur = self.root\n        for i in range(len(word)):\n            char = word[i]\n            if char not in cur.childrenMap.keys():\n                return False\n            cur = cur.childrenMap[char]\n        return cur.isWord\n\n    \n    def startsWith(self, prefix):\n        cur = self.root\n        for i in range(len(prefix)):\n            char = prefix[i]\n            if char not in cur.childrenMap.keys():\n                return False\n            cur = cur.childrenMap[char]\n        return True","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}