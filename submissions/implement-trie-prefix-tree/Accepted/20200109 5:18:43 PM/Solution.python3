// https://leetcode.com/problems/implement-trie-prefix-tree

from collections import defaultdict

class TrieNode:
    def __init__(self):
        self.childrendic = defaultdict(TrieNode)
        self.isWord = False
        
        
class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        cur = self.root
        for char in word:
            if char not in cur.childrendic.keys():
                cur.childrendic[char] = TrieNode()
            cur = cur.childrendic[char]
        cur.isWord = True
    
    def search(self, word):
        cur = self.root
        for char in word:
            if char not in cur.childrendic.keys():
                return False
            cur = cur.childrendic[char]
        if cur.isWord:
            return True
        else:
            return False
                

    def startsWith(self, prefix):
        cur = self.root
        for char in prefix:
            if char not in cur.childrendic.keys():
                return False
            cur = cur.childrendic[char]
        return True
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)