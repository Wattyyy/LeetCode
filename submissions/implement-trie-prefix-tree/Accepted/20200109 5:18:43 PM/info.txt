{"id":292619458,"lang":"python3","time":"1 year, 6 months","timestamp":1578557923,"status_display":"Accepted","runtime":"204 ms","url":"/submissions/detail/292619458/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"31.6 MB","code":"from collections import defaultdict\n\nclass TrieNode:\n    def __init__(self):\n        self.childrendic = defaultdict(TrieNode)\n        self.isWord = False\n        \n        \nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        cur = self.root\n        for char in word:\n            if char not in cur.childrendic.keys():\n                cur.childrendic[char] = TrieNode()\n            cur = cur.childrendic[char]\n        cur.isWord = True\n    \n    def search(self, word):\n        cur = self.root\n        for char in word:\n            if char not in cur.childrendic.keys():\n                return False\n            cur = cur.childrendic[char]\n        if cur.isWord:\n            return True\n        else:\n            return False\n                \n\n    def startsWith(self, prefix):\n        cur = self.root\n        for char in prefix:\n            if char not in cur.childrendic.keys():\n                return False\n            cur = cur.childrendic[char]\n        return True\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}