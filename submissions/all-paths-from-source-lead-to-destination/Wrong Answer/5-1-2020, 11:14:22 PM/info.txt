{"id":332739960,"lang":"python3","time":"1 year, 2 months","timestamp":1588342462,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/332739960/","is_pending":"Not Pending","title":"All Paths from Source Lead to Destination","memory":"N/A","code":"from collections import defaultdict, deque\nclass Solution:\n    def __init__(self):\n        self.ans = True\n    \n\n    def topological_sort(self, N, graph):\n        inorder = [0] * N\n        for i in range(N):\n            for j in graph[i]:\n                inorder[j] += 1\n        queue = deque([])\n        for i, v in enumerate(inorder):\n            if v == 0:\n                queue.append(i)\n        cnt = 0\n        while queue:\n            v = queue.popleft()\n            for nv in graph[v]:\n                inorder[nv] -= 1\n                if inorder[nv] == 0:\n                    queue.append(nv)\n            cnt += 1\n        return cnt == N\n\n\n    def dfs(self, v, target, graph):\n        if v == target:\n            if not graph[v]:\n                return \n            self.ans = False\n            return\n        \n        if not graph[v]:\n            self.ans = False\n            return\n        \n        for nv in graph[v]:\n            self.dfs(nv, target, graph)\n                \n\n    def leadsToDestination(self, n, edges, source, destination):\n        if edges == [[]]:\n            return source == destination\n        graph = defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n        if not self.topological_sort(n, graph):\n            return False\n        self.dfs(source, destination, graph)\n        return self.ans\n\n        ","compare_result":"111111111111111111111111111101111111111111111111","title_slug":"all-paths-from-source-lead-to-destination"}