{"id":335650277,"lang":"python3","time":"1 year, 2 months","timestamp":1588835997,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/335650277/","is_pending":"Not Pending","title":"Cousins in Binary Tree","memory":"13.8 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nfrom collections import defaultdict\nclass Solution:\n    def search(self, cur, target, parent, depth):\n        if cur.val == target:\n            self.d[cur.val] = [parent.val, depth]\n            return\n        else:\n            if cur.left is not None:\n                self.search(cur.left, target, cur, depth+1)\n            if cur.right is not None:\n                self.search(cur.right, target, cur, depth+1)\n            \n            \n    def isCousins(self, root, x, y):\n        # x -> [parent, depth]\n        # y -> [parent, depth]\n        self.d = defaultdict(list)\n        self.search(root, x, root, 0)\n        self.search(root, y, root, 0)\n        return (self.d[x][0] != self.d[y][0]) and (self.d[x][1] == self.d[y][1])\n        \n        \n        \n        \n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"cousins-in-binary-tree"}