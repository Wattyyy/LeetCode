{"id":301332880,"lang":"python3","time":"1 year, 5 months","timestamp":1581173366,"status_display":"Accepted","runtime":"3104 ms","url":"/submissions/detail/301332880/","is_pending":"Not Pending","title":"Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold","memory":"26.1 MB","code":"class NumArray:\n    def __init__(self, nums):\n        if len(nums)>0:\n            self.length = len(nums)\n            self.tree = [0 for _ in range(2*self.length)]\n            \n            # build tree \n            n = self.length\n            i = n\n            j = 0\n            while i<2*n:\n                self.tree[i] = nums[j]\n                i += 1\n                j += 1\n            for i in range(n-1, 0, -1):\n                self.tree[i] = self.tree[i*2] + self.tree[i*2 + 1]\n\n    def update(self, pos, val):\n        # 0 <= pos < n\n        n = self.length\n        pos += n\n        self.tree[pos] = val\n        while (pos > 0):\n            left = pos\n            right = pos\n            if pos%2==0:\n                right = pos + 1\n            else:\n                left = pos - 1\n            self.tree[pos//2] = self.tree[left] + self.tree[right]\n            pos //= 2\n        \n    def sumRange(self, l, r):\n        if l > r:\n            l, r = r, l\n        # 0 <= l,r < n\n        n = self.length\n        l += n\n        r += n\n        res = 0\n        while l<=r:\n            # check l is right child\n            if l%2==1:\n                res += self.tree[l]\n                l += 1\n            # check r is left child\n            if r%2==0:\n                res += self.tree[r]\n                r -= 1\n            l //= 2\n            r //= 2\n        return res\n       \n\n\nclass Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold):\n        N = len(arr)\n        seg_tree = NumArray(arr)\n        ans = 0\n        for i in range(N):\n            if i+k-1 > N-1:\n                break\n            avg = (seg_tree.sumRange(i, i+k-1)) / k\n            if threshold <= avg:\n                ans += 1\n        return ans\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold"}