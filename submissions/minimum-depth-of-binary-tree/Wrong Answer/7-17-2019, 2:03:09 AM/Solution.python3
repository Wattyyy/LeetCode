// https://leetcode.com/problems/minimum-depth-of-binary-tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution:
    def traverse(self, queue, depth):
        depth += 1
        nx_queue = []
        while len(queue)>0:
            node = queue.pop(0)
            if node.left is not None:
                nx_queue.append(node.left)
            else:
                return depth
            
            if node.right is not None:
                nx_queue.append(node.right)
            else:
                return depth
        
        return self.traverse(nx_queue, depth)
    
            
    
    def minDepth(self, root: TreeNode) -> int:
        if root is None:
            return 0
        depth = 0
        queue = [root]
        return self.traverse(queue, depth)
        