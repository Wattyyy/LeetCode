{"id":243839207,"lang":"python3","time":"1 year, 12 months","timestamp":1563296333,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/243839207/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\nclass Solution:\n    def traverse(self, queue, depth):\n        if len(queue)==0:\n            return depth\n        nx_queue = []\n        while len(queue)>0:\n            node = queue.pop(0)\n            if node.left is not None:\n                nx_queue.append(node.left)\n            if node.right is not None:\n                nx_queue.append(node.right)\n        \n        return self.traverse(nx_queue, depth+1)\n    \n            \n    \n    def minDepth(self, root: TreeNode) -> int:\n        depth = -1\n        queue = [root]\n        if root is None:\n            return 0\n        return self.traverse(queue, depth)\n        ","compare_result":"11000010001000000100000100001000000000000","title_slug":"minimum-depth-of-binary-tree"}