{"id":313605986,"lang":"python3","time":"1 year, 3 months","timestamp":1584541464,"status_display":"Accepted","runtime":"160 ms","url":"/submissions/detail/313605986/","is_pending":"Not Pending","title":"Maximum Subarray","memory":"13.9 MB","code":"class Solution:\n    def maxSubArray(self, nums):\n        if not nums:\n            return 0\n\n        def merge_sum(l, r, m):\n            if l == r:\n                return nums[l]\n            left_sum = -float('inf')\n            left_cum = 0\n            for i in reversed(range(l, m+1)):\n                left_cum += nums[i]\n                left_sum = max(left_sum, left_cum)\n            right_sum = -float('inf')\n            right_cum = 0\n            for i in range(m+1, r+1):\n                right_cum += nums[i]\n                right_sum = max(right_sum, right_cum)\n            return left_sum + right_sum\n            \n        def divide_and_conquer(l, r):\n            if l == r:\n                return nums[l]\n            m = (l + r) // 2\n            left_val = divide_and_conquer(l, m)\n            right_val = divide_and_conquer(m+1, r)\n            merge_val = merge_sum(l, r, m)\n            return max(left_val, right_val, merge_val)\n        \n        res = divide_and_conquer(0, len(nums)-1)\n        return res\n            \n            \n                \n            \n            \n            \n\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-subarray"}