// https://leetcode.com/problems/maximum-subarray

import sys
sys.setrecursionlimit(10 ** 6)
INF = sys.maxsize

class Solution:
    def maxSubArray(self, nums):
        if not nums:
            return 0
        
        def divide_and_conquer(l, r):
            if l == r:
                return nums[l]
            mid = (r + l) // 2
            l_res = divide_and_conquer(l, mid)
            r_res = divide_and_conquer(mid+1, r)
            
            l_max, l_sum = -INF, 0
            for i in reversed(range(l, mid+1)):
                l_sum += nums[i]
                l_max = max(l_max, l_sum)
            r_max, r_sum = -INF, 0
            for i in range(mid+1, r+1):
                r_sum += nums[i]
                r_max = max(r_max, r_sum)
            merged = l_max + r_max
            
            return max(l_res, r_res, merged)
        
            
        return divide_and_conquer(0, len(nums)-1)