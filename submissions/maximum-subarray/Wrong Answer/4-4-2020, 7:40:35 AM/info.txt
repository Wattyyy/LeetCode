{"id":319307411,"lang":"python3","time":"1 year, 3 months","timestamp":1585953635,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/319307411/","is_pending":"Not Pending","title":"Maximum Subarray","memory":"N/A","code":"import sys\nsys.setrecursionlimit(10 ** 6)\nINF = sys.maxsize\n\nclass Solution:\n    def maxSubArray(self, nums):\n        if not nums:\n            return 0\n        \n        def divide_and_conquer(l, r):\n            if l == r:\n                return nums[l]\n            mid = (r + l) // 2\n            l_res = divide_and_conquer(l, mid)\n            r_res = divide_and_conquer(mid+1, r)\n            \n            l_max, l_sum = -INF, 0\n            for i in reversed(range(l, mid+1)):\n                l_sum += nums[i]\n                l_max = max(l_max, l_sum)\n            r_max, r_sum = -INF, 0\n            for i in range(mid+1, r+1):\n                r_sum += nums[i]\n                r_max = max(r_max, r_sum)\n            merged = l_sum + r_sum\n            \n            return max(l_res, r_res, merged)\n        \n            \n        return divide_and_conquer(0, len(nums)-1)","compare_result":"0111111111111010011111011011111111110101011111110111111111011111011011011111110111101101011101111100011011110111001011111110011001111111101011101101000000101001011011001001010000100000001100000001010000","title_slug":"maximum-subarray"}