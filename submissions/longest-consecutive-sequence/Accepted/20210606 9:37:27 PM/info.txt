{"id":503877121,"lang":"python3","time":"1 month, 1 week","timestamp":1622983047,"status_display":"Accepted","runtime":"568 ms","url":"/submissions/detail/503877121/","is_pending":"Not Pending","title":"Longest Consecutive Sequence","memory":"40.2 MB","code":"from typing import List\nclass UnionFind:\n    def __init__(self, nums):\n        self.parent = {num:num for num in nums}\n        self.rank = {num:0 for num in nums}\n        self.size = {num:1 for num in nums}\n    \n    def find(self, node):\n        if node == self.parent[node]:\n            return node\n        res = self.find(self.parent[node])\n        return res\n        \n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n\n        if self.rank[x] < self.rank[y]:\n            self.parent[x] = y\n            self.size[y] += self.size[x]\n        else:\n            self.parent[y] = x\n            self.size[x] += self.size[y]\n\n        if self.rank[x] == self.rank[y]:\n            self.rank[x] += 1\n\n        \n        \nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        if len(nums) == 0:\n            return 0\n        new_nums = list(set(nums))\n        uf = UnionFind(new_nums)\n        for num in new_nums:\n            if num - 1 in uf.parent.keys():\n                uf.union(num, num-1)\n            if num + 1 in uf.parent.keys():\n                uf.union(num, num+1)\n        \n        return max(uf.size.values())\n        \n\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-consecutive-sequence"}