{"id":481361647,"lang":"python3","time":"2 months, 4 weeks","timestamp":1618579378,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/481361647/","is_pending":"Not Pending","title":"Longest Consecutive Sequence","memory":"17.3 MB","code":"from typing import List\nfrom collections import defaultdict\n\nclass UnionFind():\n    def __init__(self, N):\n        self.node2par = {i:i for i in range(N)}\n        self.rank = {i:0 for i in range(N)}\n        self.count = {i:1 for i in range(N)}\n        \n\n    def find_par(self, x):\n        if self.node2par[x] != x:\n            x = self.find_par(self.node2par[x])\n        return x\n\n    def unite(self, x, y):\n        x, y = self.find_par(x), self.find_par(y)\n        if x == y:\n            return\n        if self.rank[x] < self.rank[y]:\n            self.node2par[x] = y\n            self.count[y] += self.count[x]\n        else:\n            self.node2par[y] = x\n            self.count[x] += self.count[y]\n\n        if self.rank[x] == self.rank[y]:\n            self.rank[x] += 1\n    \n\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        if len(nums) == 0:\n            return 0\n        nums = list(set(nums))\n        num2idx = {}\n        for idx, num in enumerate(nums):\n            num2idx[num] = idx\n        uf = UnionFind(len(nums))\n        for idx, num in enumerate(nums):\n            if num-1 in num2idx:\n                idx2 = num2idx[num-1]\n                uf.unite(idx, idx2)\n            if num+1 in num2idx:\n                idx3 = num2idx[num+1]\n                uf.unite(idx, idx3)\n        \n        return max(uf.count.values())\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-consecutive-sequence"}