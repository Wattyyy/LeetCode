// https://leetcode.com/problems/longest-consecutive-sequence

from typing import List
from collections import defaultdict

class UnionFind():
    def __init__(self, N):
        self.node2par = {i:i for i in range(N)}
        self.rank = {i:0 for i in range(N)}
        self.count = {i:1 for i in range(N)}
        

    def find_par(self, x):
        if self.node2par[x] != x:
            x = self.find_par(self.node2par[x])
        return x

    def unite(self, x, y):
        x, y = self.find_par(x), self.find_par(y)
        if x == y:
            return
        if self.rank[x] < self.rank[y]:
            self.node2par[x] = y
            self.count[y] += self.count[x]
        else:
            self.node2par[y] = x
            self.count[x] += self.count[y]

        if self.rank[x] == self.rank[y]:
            self.rank[x] += 1
    

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0
        nums = list(set(nums))
        num2idx = {}
        for idx, num in enumerate(nums):
            num2idx[num] = idx
        uf = UnionFind(len(nums))
        for idx, num in enumerate(nums):
            if num-1 in num2idx:
                idx2 = num2idx[num-1]
                uf.unite(idx, idx2)
            if num+1 in num2idx:
                idx3 = num2idx[num+1]
                uf.unite(idx, idx3)
        
        return max(uf.count.values())
