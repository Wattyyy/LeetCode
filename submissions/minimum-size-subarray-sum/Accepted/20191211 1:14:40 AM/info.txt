{"id":285045965,"lang":"python3","time":"1Â year, 7Â months","timestamp":1575994480,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/285045965/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"15.2 MB","code":"class Solution:\n    def minSubArrayLen(self, s: int, nums: List[int]) -> int:\n        if sum(nums) < s: return 0\n        if len(nums)==1: return 1\n        N = len(nums)\n        lp, rp = 0, 0\n        ans = N\n        cur_sum = nums[0]\n        \n        while (lp<=rp) and rp<N:\n            if cur_sum<s:\n                rp += 1\n                # avoid index error\n                if rp>=N: break\n                cur_sum += nums[rp]\n            else:\n                ans = min(ans, rp - lp + 1)\n                cur_sum -= nums[lp]\n                lp += 1\n\n        return ans\n        \n        \n        ","compare_result":"111111111111111","title_slug":"minimum-size-subarray-sum"}