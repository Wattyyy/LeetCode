// https://leetcode.com/problems/binary-tree-maximum-path-sum

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxPathSum(self, root: TreeNode) -> int:
        if not root:
            return 0
        self.ans = 0
        def dp(node):
            if node.left and node.right:
                l_val, r_val = dp(node.left), dp(node.right)
                max_val = max(l_val + r_val + node.val, l_val + node.val, r_val + node.val, node.val)
            elif node.left and not node.right:
                l_val = dp(node.left)
                max_val = max(l_val + node.val, node.val)       
            elif not node.left and node.right:
                r_val = dp(node.right)
                max_val = max(r_val + node.val, node.val)    
            else:
                max_val = node.val
        
            self.ans = max(self.ans, max_val)
            return max_val
        
        dp(root)
        return self.ans
        
        
            
        
        