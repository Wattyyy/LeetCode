{"id":331721285,"lang":"python3","time":"1 year, 2 months","timestamp":1588145106,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/331721285/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"20.5 MB","code":"# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def __init__(self):\n        self.max = -float('inf')\n\n    def calc_sum(self, node):\n        if (not node.left) and (not node.right):\n            self.max = max(self.max, node.val)\n            return node.val\n\n        elif node.left and not node.right:\n            left_val = self.calc_sum(node.left)\n            res = max(left_val + node.val, node.val)\n            self.max = max(self.max, res)\n            return res\n\n        elif not node.left and node.right:\n            right_val = self.calc_sum(node.right)\n            res = max(right_val + node.val, node.val)\n            self.max = max(self.max, res)\n            return res\n        \n        else:\n            left_val, right_val = self.calc_sum(node.left), self.calc_sum(node.right)\n            res = max(\n                left_val + node.val, \n                node.val + right_val,\n                node.val\n                )\n            self.max = max(self.max, res, left_val + node.val + right_val)\n            return res\n    \n    def maxPathSum(self, root):\n        _ = self.calc_sum(root)\n        return self.max\n\n        \n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum"}