{"id":310519121,"lang":"python3","time":"1 year, 4 months","timestamp":1583661167,"status_display":"Accepted","runtime":"144 ms","url":"/submissions/detail/310519121/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"20.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def maxPathSum(self, root):\n        if not root:\n            return 0\n        self.ans = -float('inf')\n        def dp(node):\n            if node.left and node.right:\n                l_val, r_val = dp(node.left), dp(node.right)\n                self.ans = max(self.ans, l_val + r_val + node.val, l_val + node.val, r_val + node.val, node.val)\n                res = max(l_val + node.val, r_val + node.val, node.val)\n            elif node.left and not node.right:\n                l_val = dp(node.left)\n                self.ans = max(self.ans, l_val + node.val, node.val)\n                res = max(l_val + node.val, node.val)\n            elif not node.left and node.right:\n                r_val = dp(node.right)\n                self.ans = max(self.ans, r_val + node.val, node.val)\n                res = max(r_val + node.val, node.val)\n            else:\n                self.ans = max(self.ans, node.val)\n                res = node.val\n            return res\n        \n        dp(root)\n        return self.ans\n        \n            \n        \n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum"}