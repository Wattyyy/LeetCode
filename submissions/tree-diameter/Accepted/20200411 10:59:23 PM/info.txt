{"id":323101683,"lang":"python3","time":"1 year, 3 months","timestamp":1586613563,"status_display":"Accepted","runtime":"200 ms","url":"/submissions/detail/323101683/","is_pending":"Not Pending","title":"Tree Diameter","memory":"18.2 MB","code":"from collections import defaultdict\nclass Solution:\n    def __init__(self):\n        self.max_dist = 0\n        self.max_dist_node = -1\n\n\n    def calc_diameter(self, node, visited, dist):\n        flag = False\n        for nx_node in self.graph[node]:\n            if nx_node not in visited:\n                flag = True\n                break\n        if flag:\n            for nx_node in self.graph[node]:\n                if nx_node not in visited:\n                    visited.add(nx_node)\n                    self.calc_diameter(nx_node, visited, dist+1)\n                    visited.remove(nx_node)\n        else:\n            if self.max_dist <= dist:\n                self.max_dist = dist\n                self.max_dist_node = node\n                return \n\n\n    def treeDiameter(self, edges):\n        if len(edges) == 0:\n            return 0\n        self.graph = defaultdict(list)\n        for u, v in edges:\n            self.graph[u].append(v)\n            self.graph[v].append(u)\n        root = edges[0][0]\n        self.calc_diameter(node=root, visited=set([root]), dist=0)\n        farthest_node = self.max_dist_node\n        self.max_dist = 0\n        self.calc_diameter(node=farthest_node, visited=set([farthest_node]), dist=0)\n        return self.max_dist\n        \n\n        \n\n        ","compare_result":"11111111111111111111111111","title_slug":"tree-diameter"}