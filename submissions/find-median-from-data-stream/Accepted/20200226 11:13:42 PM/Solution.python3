// https://leetcode.com/problems/find-median-from-data-stream

import heapq
class MedianFinder:

    def __init__(self):
        self.min_heap = []
        heapq.heapify(self.min_heap)
        self.max_heap = []
        heapq.heapify(self.max_heap)
        self.med = 0
        self.cnt = 0
        
        

    def addNum(self, num):
        self.cnt += 1
        if self.cnt == 1:
            self.med = num
            return
        
        if self.cnt == 2:
            min_val, max_val = min(self.med, num), max(self.med, num)
            heapq.heappush(self.max_heap, -min_val)
            heapq.heappush(self.min_heap, max_val)
            self.med = (-self.max_heap[0] + self.min_heap[0]) / 2
            return

        if self.cnt % 2 == 1:
            if num < self.med:
                heapq.heappush(self.max_heap, -num)
                self.med = -self.max_heap[0]
            else:
                heapq.heappush(self.min_heap, num)
                self.med = self.min_heap[0]

        elif self.cnt % 2 == 0:
            if num < self.med:
                heapq.heappush(self.max_heap, -num)
            else:
                heapq.heappush(self.min_heap, num)
            if len(self.max_heap) < len(self.min_heap):
                val = heapq.heappop(self.min_heap)
                heapq.heappush(self.max_heap, -val)
            elif len(self.max_heap) > len(self.min_heap):
                val = heapq.heappop(self.max_heap)
                heapq.heappush(self.min_heap, -val)
            self.med = self.med = (-self.max_heap[0] + self.min_heap[0]) / 2
        

    def findMedian(self):
        return self.med


# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()