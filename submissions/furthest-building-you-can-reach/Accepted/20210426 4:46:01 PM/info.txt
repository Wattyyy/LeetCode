{"id":485353249,"lang":"python3","time":"2 months, 2 weeks","timestamp":1619423161,"status_display":"Accepted","runtime":"608 ms","url":"/submissions/detail/485353249/","is_pending":"Not Pending","title":"Furthest Building You Can Reach","memory":"28.8 MB","code":"import heapq\nfrom typing import List\n\nclass Solution:\n    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:\n        if len(heights) == 1:\n            return 0\n\n        if ladders == 0:\n            bricks_sum = 0\n            res = 0\n            prev = heights[0]\n            for i, cur in enumerate(heights):\n                if i == 0:\n                    continue\n                if prev < cur:\n                    bricks_sum += cur - prev\n                prev = cur\n                if bricks_sum <= bricks:\n                    res = i\n                else:\n                    break\n            return res\n\n\n        min_heap = []\n        prev = heights[0]\n        bricks_sum = 0\n        res = 0\n        for i, cur in enumerate(heights):\n            if i == 0:\n                continue\n            if prev < cur:\n                diff = cur - prev\n                if (len(min_heap) < ladders):\n                    heapq.heappush(min_heap, diff)\n                elif diff < min_heap[0]:\n                    bricks_sum += diff\n                else:\n                    heapq.heappush(min_heap, diff)\n                    bricks_sum += heapq.heappop(min_heap)\n\n            prev = cur\n            if bricks_sum <= bricks:\n                res = i\n            else:\n                break\n        return res\n\n\n\n\n\n\n\n\n            ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"furthest-building-you-can-reach"}