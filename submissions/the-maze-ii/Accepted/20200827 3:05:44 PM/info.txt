{"id":386995969,"lang":"python3","time":"10 months, 2 weeks","timestamp":1598508344,"status_display":"Accepted","runtime":"360 ms","url":"/submissions/detail/386995969/","is_pending":"Not Pending","title":"The Maze II","memory":"14 MB","code":"from collections import defaultdict, deque\nfrom bisect import bisect_left\nimport sys\n\nclass Solution:\n    def shortestDistance(self, maze: List[List[int]], start: List[int], destination: List[int]) -> int:\n        INF = sys.maxsize\n        row_walls, col_walls = defaultdict(list), defaultdict(list)\n        R, C = len(maze), len(maze[0])\n        dist_list = [[INF for _ in range(C)] for __ in range(R)]\n        for r in range(R):\n            for c in range(C):\n                if c == 0:\n                    row_walls[r].append(-1)\n                if maze[r][c] == 1:\n                    row_walls[r].append(c)\n                if c == C - 1:\n                    row_walls[r].append(C)\n        \n        for c in range(C):\n            for r in range(R):\n                if r == 0:\n                    col_walls[c].append(-1)\n                if maze[r][c] == 1:\n                    col_walls[c].append(r)\n                if r == R - 1:\n                    col_walls[c].append(R)\n        \n        dy, dx = destination[0], destination[1]\n        sy, sx = start[0], start[1]\n        dist_list[sy][sx] = 0\n        queue = deque([[sy, sx]])\n\n        while queue:\n            y, x = queue.popleft()\n\n            idx = bisect_left(row_walls[y], x)\n            # move right\n            next_x = row_walls[y][idx] - 1 \n            if abs(next_x - x) + dist_list[y][x] < dist_list[y][next_x]:\n                dist_list[y][next_x] = abs(next_x - x) + dist_list[y][x]\n                queue.append([y, next_x])\n            # move left\n            next_x = row_walls[y][idx-1] + 1 \n            if abs(next_x - x) + dist_list[y][x] < dist_list[y][next_x]:\n                dist_list[y][next_x] = abs(next_x - x) + dist_list[y][x]\n                queue.append([y, next_x])\n            \n            idx = bisect_left(col_walls[x], y)\n            # move up\n            next_y = col_walls[x][idx-1] + 1 \n            if abs(next_y - y) + dist_list[y][x] < dist_list[next_y][x]:\n                dist_list[next_y][x] = abs(next_y - y) + dist_list[y][x]\n                queue.append([next_y, x])\n            # move down\n            next_y = col_walls[x][idx] - 1 \n            if abs(next_y - y) + dist_list[y][x] < dist_list[next_y][x]:\n                dist_list[next_y][x] = abs(next_y - y) + dist_list[y][x]\n                queue.append([next_y, x])\n        \n        if dist_list[dy][dx] == INF:\n            return -1\n        return dist_list[dy][dx]\n\n            \n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-maze-ii"}