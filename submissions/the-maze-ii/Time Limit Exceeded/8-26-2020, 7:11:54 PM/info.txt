{"id":386597779,"lang":"python3","time":"10 months, 3 weeks","timestamp":1598436714,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/386597779/","is_pending":"Not Pending","title":"The Maze II","memory":"N/A","code":"from collections import defaultdict\nfrom bisect import bisect_left\nimport sys\n\nclass Solution:\n    def dfs(self, y, x, maze, dist_list, cnt):\n        dist_list[y][x] = cnt\n        \n        # move right\n        idx = bisect_left(self.row_walls[y], x)\n        next_x = self.row_walls[y][idx] - 1 \n        next_cnt = abs(next_x - x) + cnt\n        if next_cnt < dist_list[y][next_x]:\n            self.dfs(y, next_x, maze, dist_list, next_cnt)\n        \n        # move left\n        idx = bisect_left(self.row_walls[y], x)\n        next_x = self.row_walls[y][idx-1] + 1 \n        next_cnt = abs(next_x - x) + cnt\n        if next_cnt < dist_list[y][next_x]:\n            self.dfs(y, next_x, maze, dist_list, next_cnt)\n\n        # move up\n        idx = bisect_left(self.col_walls[x], y)\n        next_y = self.col_walls[x][idx-1] + 1 \n        next_cnt = abs(next_y - y) + cnt\n        if next_cnt < dist_list[next_y][x]:\n            self.dfs(next_y, x, maze, dist_list, next_cnt)\n        \n        # move down\n        idx = bisect_left(self.col_walls[x], y)\n        next_y = self.col_walls[x][idx] - 1 \n        next_cnt = abs(next_y - y) + cnt\n        if next_cnt < dist_list[next_y][x]:\n            self.dfs(next_y, x, maze, dist_list, next_cnt)\n        \n\n    def shortestDistance(self, maze: List[List[int]], start: List[int], destination: List[int]) -> int:\n        INF = sys.maxsize\n        row_walls, col_walls = defaultdict(list), defaultdict(list)\n        R, C = len(maze), len(maze[0])\n        dist_list = [[INF for _ in range(C)] for __ in range(R)]\n        for r in range(R):\n            for c in range(C):\n                if c == 0:\n                    row_walls[r].append(-1)\n                if maze[r][c] == 1:\n                    row_walls[r].append(c)\n                if c == C - 1:\n                    row_walls[r].append(C)\n        \n        for c in range(C):\n            for r in range(R):\n                if r == 0:\n                    col_walls[c].append(-1)\n                if maze[r][c] == 1:\n                    col_walls[c].append(r)\n                if r == R - 1:\n                    col_walls[c].append(R)\n        \n        self.row_walls, self.col_walls = row_walls, col_walls\n        self.dfs(start[0], start[1], maze, dist_list, 0)\n        \n        if dist_list[destination[0]][destination[1]] != INF:\n            return dist_list[destination[0]][destination[1]] \n        else:\n            return -1\n\n                \n","compare_result":"111111111111111111111111111111111111100000000000000000000000000000000000000000","title_slug":"the-maze-ii"}