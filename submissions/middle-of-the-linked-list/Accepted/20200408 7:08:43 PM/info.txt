{"id":321620115,"lang":"python3","time":"1 year, 3 months","timestamp":1586340523,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/321620115/","is_pending":"Not Pending","title":"Middle of the Linked List","memory":"14 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nfrom math import ceil\nfrom collections import defaultdict\nclass Solution:\n    def middleNode(self, head):\n        cur = head\n        cnt = 1\n        d = defaultdict(int)\n        while cur:\n            d[cnt] = cur\n            cur = cur.next\n            cnt += 1\n        if (cnt - 1) % 2 == 0:\n            key = ceil(cnt / 2)\n            return d[key]\n        else:\n            key = cnt // 2\n            return d[key]\n            \n        ","compare_result":"111111111111111","title_slug":"middle-of-the-linked-list"}