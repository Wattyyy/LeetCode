{"id":322660619,"lang":"python3","time":"1Â year, 3Â months","timestamp":1586531748,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/322660619/","is_pending":"Not Pending","title":"Flatten Nested List Iterator","memory":"17.6 MB","code":"# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger:\n#    def isInteger(self) -> bool:\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        \"\"\"\n#\n#    def getInteger(self) -> int:\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        \"\"\"\n#\n#    def getList(self) -> [NestedInteger]:\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        \"\"\"\n\nclass NestedIterator:\n    def __init__(self, nestedList):\n        self.list = []\n        def helper(ls):\n            for item in ls:\n                if not item.isInteger():\n                    helper(item.getList())\n                else:\n                    self.list.append(item.getInteger())\n            return\n        helper(nestedList)\n        self.length = len(self.list)\n        self.idx = -1\n        \n    def next(self):\n        self.idx += 1\n        return self.list[self.idx]\n    \n    \n    def hasNext(self):\n        return (0 <= self.idx + 1) and (self.idx + 1 < self.length)\n         \n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())","compare_result":"11111111111111111111111111111111111111111111","title_slug":"flatten-nested-list-iterator"}