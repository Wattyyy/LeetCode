// https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph

class UnionFind:
    def __init__(self, N):
        self.node2par = {i:i for i in range(N)}
        self.count = N
        self.rank = [0] * N
        
    def find_par(self, x):
        if self.node2par[x] == x:
            return x
        res = self.find_par(self.node2par[x])
        return res
    
    def unite(self, x, y):
        x, y = self.node2par[x], self.node2par[y]
        if x == y:
            return
        if self.rank[x] == self.rank[y]:
            self.node2par[x] = y
            self.rank[y] += 1
        elif self.rank[x] < self.rank[y]:
            self.node2par[x] = y
        else:
            self.node2par[y] = x
        self.count -= 1

class Solution:
    def countComponents(self, n, edges):
        if n == 0 or edges == [[]]:
            return 0
        uf = UnionFind(n)
        for u, v in edges:
            uf.unite(u, v)
        if uf.count == 0:
            return 1
        return uf.count
        