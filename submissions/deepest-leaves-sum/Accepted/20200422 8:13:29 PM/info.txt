{"id":328526155,"lang":"python3","time":"1 year, 2 months","timestamp":1587554009,"status_display":"Accepted","runtime":"92 ms","url":"/submissions/detail/328526155/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"17.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nfrom collections import defaultdict\nclass Solution:\n    def __init__(self):\n        self.depth2val = defaultdict(list)\n\n    def traverse(self, node, depth):\n        self.depth2val[depth].append(node.val)\n        if not node.left and not node.right:\n            return\n        if node.left:\n            self.traverse(node.left, depth+1)\n        if node.right:\n            self.traverse(node.right, depth+1)\n        \n    def deepestLeavesSum(self, root):\n        self.traverse(root, 0)\n        max_depth = max(self.depth2val.keys())\n        return sum(self.depth2val[max_depth])\n        \n        ","compare_result":"111111111111111","title_slug":"deepest-leaves-sum"}