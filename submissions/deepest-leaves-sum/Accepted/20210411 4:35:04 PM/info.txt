{"id":479210643,"lang":"python3","time":"3Â months","timestamp":1618126504,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/479210643/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"17.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def deepestLeavesSum(self, root):\n        d = defaultdict(list)\n        queue = deque([(root, 0)])\n        while queue:\n            node, depth = queue.popleft()\n            d[depth].append(node.val)\n            if node.left:\n                queue.append((node.left, depth+1))\n            if node.right:\n                queue.append((node.right, depth+1))\n\n        max_depth = max(d.keys())\n        return sum(d[max_depth])\n            \n        ","compare_result":"111111111111111","title_slug":"deepest-leaves-sum"}