{"id":364734914,"lang":"python3","time":"1Â year","timestamp":1594393270,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/364734914/","is_pending":"Not Pending","title":"Flatten a Multilevel Doubly Linked List","memory":"N/A","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\nclass Solution:\n    def flatten(self, head):\n        if not head:\n            return None\n        stack = []\n        cur = head\n        while cur:\n            if cur.child:\n                stack.append(cur.next)\n                cur.next = cur.child\n                cur.next.prev = cur\n                cur = cur.next\n                cur.prev.child = None\n            elif not cur.next:\n                if not stack:\n                    break\n                else:\n                    node = stack.pop(-1)\n                    cur.next = node\n                    cur.next.prev = cur\n                    cur = cur.next\n            else:\n                cur.next.prev = cur\n                cur = cur.next\n        return head\n\n            \n\n            \n\n        ","compare_result":"1111111111111111111000","title_slug":"flatten-a-multilevel-doubly-linked-list"}