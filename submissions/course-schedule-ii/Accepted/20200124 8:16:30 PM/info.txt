{"id":297021061,"lang":"python3","time":"1 year, 5 months","timestamp":1579864590,"status_display":"Accepted","runtime":"140 ms","url":"/submissions/detail/297021061/","is_pending":"Not Pending","title":"Course Schedule II","memory":"13.9 MB","code":"from collections import deque, defaultdict\nclass Solution:\n    def topological_sort(self, n, graph):\n        in_order = [0 for _ in range(n)]\n        for i in graph:\n            for j in graph[i]:\n                in_order[j] += 1\n        queue = deque([])\n        for i in range(n):\n            if in_order[i] == 0:\n                queue.append(i)\n        cnt = 0\n        res = []\n        while queue:\n            v = queue.popleft()\n            res.append(v)\n            for neighbor in graph[v]:\n                in_order[neighbor] -= 1\n                if in_order[neighbor] == 0:\n                    queue.append(neighbor)\n            cnt += 1\n\n        if cnt != n:\n            return []\n        else:\n            return res\n        \n    def findOrder(self, numCourses, prerequisites):\n        if not prerequisites:\n            return [i for i in range(numCourses)]\n        graph = defaultdict(list)\n        for i in range(len(prerequisites)):\n            val, key = prerequisites[i]\n            graph[key].append(val)\n        return self.topological_sort(numCourses, graph)\n","compare_result":"11111111111111111111111111111111111111111111","title_slug":"course-schedule-ii"}