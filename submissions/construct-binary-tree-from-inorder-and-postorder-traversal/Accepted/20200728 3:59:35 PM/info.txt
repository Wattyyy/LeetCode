{"id":372636698,"lang":"python3","time":"11 months, 2 weeks","timestamp":1595919575,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/372636698/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"18 MB","code":"class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:\n        def helper(in_left, in_right):\n            # if there is no elements to construct subtrees\n            if in_left > in_right:\n                return None\n            \n            # pick up the last element as a root\n            val = postorder.pop()\n            root = TreeNode(val)\n\n            # root splits inorder list\n            # into left and right subtrees\n            index = idx_map[val]\n \n            # build right subtree\n            root.right = helper(index + 1, in_right)\n            # build left subtree\n            root.left = helper(in_left, index - 1)\n            return root\n        \n        # build a hashmap value -> its index\n        idx_map = {val:idx for idx, val in enumerate(inorder)} \n        return helper(0, len(inorder) - 1)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal"}