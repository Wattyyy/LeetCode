{"id":503478457,"lang":"python3","time":"1 month, 1 week","timestamp":1622916995,"status_display":"Accepted","runtime":"432 ms","url":"/submissions/detail/503478457/","is_pending":"Not Pending","title":"Maximum Performance of a Team","memory":"30.2 MB","code":"from typing import List\nimport heapq\nclass Solution:\n    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:\n        if k == 1:\n            res = 0\n            for e, s in zip(efficiency, speed):\n                res = max(res, e * s)\n            return res\n\n        eff_arr = []\n        for e, s in zip(efficiency, speed):\n            eff_arr.append((e, s))\n        eff_arr = sorted(eff_arr, reverse=True)\n        pq = []\n        sp_sum = 0\n        ans = 0\n        for e, s in eff_arr:\n            if len(pq) < k - 1:\n                heapq.heappush(pq, s)\n                sp_sum += s\n                ans = max(sp_sum * e, ans)\n            else:\n                ans = max((sp_sum + s) * e, ans)\n                if pq[0] < s:\n                    rm_s = heapq.heappop(pq)\n                    heapq.heappush(pq, s)\n                    sp_sum = sp_sum + s - rm_s\n        return ans % (7 + 10 ** 9)\n\n\n\n\n                \n\n\n            \n\n\n\n\n\n\n\n        ","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"maximum-performance-of-a-team"}