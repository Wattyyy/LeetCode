{"id":343789066,"lang":"python3","time":"1 year, 1 month","timestamp":1590289339,"status_display":"Accepted","runtime":"808 ms","url":"/submissions/detail/343789066/","is_pending":"Not Pending","title":"Pseudo-Palindromic Paths in a Binary Tree","memory":"49.6 MB","code":"from collections import Counter\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def __init__(self):\n        self.ans = 0\n\n    def backtrack(self, node, cnt):\n        if not node.left and not node.right:\n            tmp = 0\n            for key in cnt:\n                if cnt[key] % 2 == 1:\n                    tmp += 1\n            if tmp <= 1:\n                self.ans += 1\n            return \n\n        if node.left:\n            cnt[node.left.val] += 1\n            self.backtrack(node.left, cnt)\n            cnt[node.left.val] -= 1\n\n        if node.right:\n            cnt[node.right.val] += 1\n            self.backtrack(node.right, cnt)\n            cnt[node.right.val] -= 1\n        \n    def pseudoPalindromicPaths (self, root):\n        cnt = Counter()\n        cnt[root.val] += 1\n        self.backtrack(root, cnt)\n        return self.ans\n        ","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"pseudo-palindromic-paths-in-a-binary-tree"}