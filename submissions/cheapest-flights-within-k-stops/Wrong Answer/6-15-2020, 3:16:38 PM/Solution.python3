// https://leetcode.com/problems/cheapest-flights-within-k-stops

from collections import defaultdict
import heapq
class Solution:
    def findCheapestPrice(self, n, flights, src, dst, K):
        graph = defaultdict(list)
        for u, v, w in flights:
            graph[u].append([v, w])

        cost = [float('inf') for _ in range(n)]
        cost[src] = 0
        pq = []
        heapq.heapify(pq)
        for v, w in graph[src]:
            # weight, current_vertex, previous_vertex, count
            pq.append([w, v, src, 0])
        
        while pq:
            w, v, prev, cnt = heapq.heappop(pq)
            cost[v] = cost[prev] + w
            for nv, nw in graph[v]:
                if cnt + 1 <= K:
                    heapq.heappush(pq, [nw, nv, v, cnt+1])


        if cost[dst] == float('inf'):
            return -1
        else:
            return cost[dst]





            

