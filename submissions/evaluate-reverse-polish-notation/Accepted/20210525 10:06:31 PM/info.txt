{"id":498062323,"lang":"rust","time":"1 month, 2 weeks","timestamp":1621947991,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/498062323/","is_pending":"Not Pending","title":"Evaluate Reverse Polish Notation","memory":"2.7 MB","code":"use std::collections::HashSet;\nimpl Solution {\n    pub fn eval_rpn(tokens: Vec<String>) -> i32 {\n        let mut vec = Vec::new();\n        let mut operators: HashSet<String> = [\"+\", \"-\", \"*\", \"/\"].iter().map(|&ope| ope.to_owned()).collect();\n        for v in tokens.iter(){\n            if !operators.contains(v){\n                let val:i32 = v.parse().unwrap();\n                vec.push(val);\n            }\n            else {\n                let num2 = vec.pop().unwrap();\n                let num1 = vec.pop().unwrap();\n                if v == \"+\" {\n                    vec.push(num1 + num2);\n                }\n                else if v == \"-\" {\n                    vec.push(num1 - num2);\n                }\n                else if v == \"*\" {\n                    vec.push(num1 * num2);\n                }\n                else {\n                    vec.push(num1 / num2);\n                }\n            }\n        }\n    return vec[0]\n    }\n}","compare_result":"11111111111111111111","title_slug":"evaluate-reverse-polish-notation"}