{"id":389837469,"lang":"python3","time":"10 months, 2 weeks","timestamp":1599030410,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/389837469/","is_pending":"Not Pending","title":"Largest Time for Given Digits","memory":"13.8 MB","code":"class Solution:\n    def __init__(self):\n        self.ans = [-1, '00:00']\n\n    def backtrack(self, remain, val, used):\n        if len(remain) == 4:    \n            for i, d in enumerate(remain):\n                if d < 4:\n                    val += 10 * 60 * d\n                    used.append(d)\n                    del remain[i]\n                    self.backtrack(remain, val, used)\n                    used.pop(-1)\n                    remain.insert(i, d)\n                    val -= 10 * 60 * d\n        \n        elif len(remain) == 3:\n            for i, d in enumerate(remain):\n                if (used[-1] < 2) or (used[-1] == 2 and d < 4):\n                    val += 60 * d\n                    used.append(d)\n                    del remain[i]\n                    self.backtrack(remain, val, used)\n                    used.pop(-1)\n                    remain.insert(i, d)\n                    val -= 60 * d\n            \n        elif len(remain) == 2:\n            for i, d in enumerate(remain):\n                if d < 6:\n                    val += 10 * d\n                    used.append(d)\n                    del remain[i]\n                    self.backtrack(remain, val, used)\n                    used.pop(-1)\n                    remain.insert(i, d)\n                    val -= 10 * d\n            \n        elif len(remain) == 1:\n            i = 0\n            d = remain[0]\n            val += d\n            used.append(d)\n            del remain[i]\n            self.backtrack(remain, val, used)\n            used.pop(-1)\n            remain.insert(i, d)        \n            val -= d\n        \n        else:\n            if self.ans[0] < val:\n                self.ans[0] = val\n                item = str(used[0]) + str(used[1]) + ':' + str(used[2]) + str(used[3])\n                self.ans[1] = item\n    \n\n    def largestTimeFromDigits(self, A):\n        self.backtrack(A, 0, [])\n        if self.ans[0] != -1:\n            return self.ans[1]\n        else:\n            return ''\n        \n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-time-for-given-digits"}