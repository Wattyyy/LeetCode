{"id":389833836,"lang":"python3","time":"10 months, 2 weeks","timestamp":1599029871,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/389833836/","is_pending":"Not Pending","title":"Largest Time for Given Digits","memory":"N/A","code":"class Solution:\n    def __init__(self):\n        self.ans = [-1, '00:00']\n\n    def backtrack(self, remain, val, used):\n        print(used)\n        if len(remain) == 4:\n            for d in remain:\n                if d < 3:\n                    val += 10 * 60 * d\n                    used.append(d)\n                    remain.remove(d)\n                    self.backtrack(remain, val, used)\n                    used.pop(-1)\n                    remain.append(d)\n                    val -= 10 * 60 * d\n        \n        elif len(remain) == 3:\n            for d in remain:\n                if (used[-1] < 2) or (used[-1] == 2 and d < 4):\n                    val += 60 * d\n                    used.append(d)\n                    remain.remove(d)\n                    self.backtrack(remain, val, used)\n                    used.pop(-1)\n                    remain.append(d)\n                    val -= 60 * d\n            \n        elif len(remain) == 2:\n            for d in remain:\n                if d < 6:\n                    val += 10 * d\n                    used.append(d)\n                    remain.remove(d)\n                    self.backtrack(remain, val, used)\n                    used.pop(-1)\n                    remain.append(d)\n                    val -= 10 * d\n            \n        elif len(remain) == 1:\n            d = remain[0]\n            val += d\n            used.append(d)\n            remain.remove(d)\n            self.backtrack(remain, val, used)\n            used.pop(-1)\n            remain.append(d)\n            val -= d\n        \n        else:\n            if self.ans[0] < val:\n                self.ans[0] = val\n                item = str(used[0]) + str(used[1]) + ':' + str(used[2]) + str(used[3])\n                self.ans[1] = item\n            return\n    \n\n    def largestTimeFromDigits(self, A):\n        self.backtrack(A, 0, [])\n        if self.ans[0] != -1:\n            return self.ans[1]\n        else:\n            return ''\n        \n","compare_result":"1111111100111111101011101011110111111111110111100111111111111111111111111111011111111111111011111111111101111011111111110110110011111111111111111110111111110001111111111111","title_slug":"largest-time-for-given-digits"}