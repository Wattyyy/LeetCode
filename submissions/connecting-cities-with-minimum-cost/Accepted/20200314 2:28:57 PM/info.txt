{"id":312248955,"lang":"python3","time":"1 year, 4 months","timestamp":1584163737,"status_display":"Accepted","runtime":"808 ms","url":"/submissions/detail/312248955/","is_pending":"Not Pending","title":"Connecting Cities With Minimum Cost","memory":"18.8 MB","code":"import heapq\n\nclass UnionFind():\n    def __init__(self, N):\n        self.node2par = {i:i for i in range(1, N+1)}\n        self.rank = {i:0 for i in range(1, N+1)}\n        self.count = N\n\n    def find_par(self, x):\n        if self.node2par[x] != x:\n            x = self.find_par(self.node2par[x])\n        return x\n\n    def unite(self, x, y):\n        x, y = self.find_par(x), self.find_par(y)\n        if x == y:\n            return\n        if self.rank[x] < self.rank[y]:\n            self.node2par[x] = y\n        else:\n            self.node2par[y] = x\n        if self.rank[x] == self.rank[y]:\n            self.rank[x]+=1\n        self.count -= 1\n\n\nclass Solution:\n    def minimumCost(self, N, connections):\n        uf = UnionFind(N)\n        total_cost = 0\n        min_heap = []\n        heapq.heapify(min_heap)\n        for u, v, w in connections:\n            heapq.heappush(min_heap, (w, u, v))\n        \n        while min_heap:\n            w, u, v = heapq.heappop(min_heap)\n            if uf.find_par(u) != uf.find_par(v):\n                total_cost += w\n                uf.unite(u, v)\n        \n        if uf.count == 1:\n            return total_cost\n        else:\n            return -1\n        \n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"connecting-cities-with-minimum-cost"}