// https://leetcode.com/problems/network-delay-time

class Solution:
    def networkDelayTime(self, times, N, K):
        graph = dict({v:[] for v in range(1, N+1)})
        time_list = [[0 for _ in range(N+1)] for __ in range(N+1)]
        for item in times:
            u, v, w = item[0], item[1], item[2]
            graph[u].append(v)
            time_list[u][v] = w
        
        INF = float("inf")
        dp = dict({i:INF for i in range(1, N+1)})        
        dp[K] = 0
                   
        while True:
            updated = False
            for v in range(1, N+1):
                neighbors = graph[v]
                for nv in neighbors:
                    old_val = dp[nv]
                    dp[nv] = min(dp[nv], dp[v]+time_list[v][nv])
                    if old_val!=dp[nv]:
                        updated = True
            if not updated:
                break
    
        max_val = 0
        for v in range(1, N+1):
            max_val = max(max_val, dp[v])
        if max_val==INF:
            return -1
        else:
            return max_val