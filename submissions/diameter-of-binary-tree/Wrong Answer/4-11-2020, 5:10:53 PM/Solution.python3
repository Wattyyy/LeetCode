// https://leetcode.com/problems/diameter-of-binary-tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def __init__(self):
        self.ans = 1
        self.left, self.right = 0, 0
        
    def calc_left(self, node, val):
        if not node.left and not node.right:
            self.left = max(self.left, val)
            return
        if node.left:
            self.calc_left(node.left, val+1)
        if node.right:
            self.calc_left(node.right, val+1)

    def calc_right(self, node, val):
        if not node.left and not node.right:
            self.right = max(self.right, val)
            return
        if node.left:
            self.calc_right(node.left, val+1)
        if node.right:
            self.calc_right(node.right, val+1)
            
    
    def diameterOfBinaryTree(self, root):
        if not root:
            return 0
        if root.left:
            self.calc_left(root.left, 1)
        if root.right:
            self.calc_right(root.right, 1)
        return self.left + self.right
