{"id":336722759,"lang":"python3","time":"1 year, 2 months","timestamp":1589033791,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/336722759/","is_pending":"Not Pending","title":"Number of Squareful Arrays","memory":"13.9 MB","code":"class Solution:\n    def __init__(self):\n        self.ans = 0\n\n    def is_square(self, num):\n        if num == 0 or num == 1:\n            return True\n        l, r = 1, num\n        while l <= r:\n            mid = (l + r) // 2\n            if mid ** 2 == num:\n                return True\n            elif mid **2 < num:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return False\n\n    def backtrack(self, end, used, arr):\n        N = len(arr)\n        if used == 2 ** N - 1:\n            self.ans += 1\n            return\n        next_num, next_idx = set(), []\n        i = 0\n        while i < N:\n            val = (used >> i) & 1\n            if (val == 0) and (arr[i] not in next_num) and (self.is_square(end + arr[i])):\n                next_num.add(arr[i])\n                next_idx.append(i)\n            i += 1\n        for idx in next_idx:\n            used = used | 2 ** idx\n            self.backtrack(arr[idx], used, arr)\n            used = used ^ 2 ** idx\n        \n    def numSquarefulPerms(self, A):\n        N = len(A)\n        used = set()\n        for i, v in enumerate(A):\n            if v not in used:\n                self.backtrack(v, 2 ** i, A)\n                used.add(v)\n        return self.ans\n        \n        \n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-squareful-arrays"}