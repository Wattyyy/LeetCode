{"id":322635541,"lang":"python3","time":"1 year, 3 months","timestamp":1586527507,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/322635541/","is_pending":"Not Pending","title":"Min Stack","memory":"18.1 MB","code":"class MinStack:\n\n    def __init__(self):\n        self.min_stack = []\n\n    def push(self, x):\n        if len(self.min_stack) == 0:\n            self.min_stack.append((x, x))\n            return\n        elif x < self.min_stack[-1][1]:\n            self.min_stack.append((x, x))\n        else:\n            min_val = self.min_stack[-1][1]\n            self.min_stack.append((x, min_val))\n\n\n    def pop(self):\n        self.min_stack.pop(-1)\n        \n\n    def top(self):\n        return self.min_stack[-1][0]\n\n        \n    def getMin(self):\n        return self.min_stack[-1][1]\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()","compare_result":"111111111111111111","title_slug":"min-stack"}