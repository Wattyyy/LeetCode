{"id":328635982,"lang":"python3","time":"1 year, 2 months","timestamp":1587575651,"status_display":"Accepted","runtime":"524 ms","url":"/submissions/detail/328635982/","is_pending":"Not Pending","title":"Is Graph Bipartite?","memory":"13.9 MB","code":"class UnionFind():\n    def __init__(self, N):\n        self.node2par = {i:i for i in range(N)}\n        self.rank = {i:0 for i in range(N)}\n        self.count = N\n\n    def find_par(self, x):\n        if self.node2par[x] != x:\n            x = self.find_par(self.node2par[x])\n        return x\n\n    def unite(self, x, y):\n        x, y = self.find_par(x), self.find_par(y)\n        if x == y:\n            return\n        if self.rank[x] < self.rank[y]:\n            self.node2par[x] = y\n        else:\n            self.node2par[y] = x\n        if self.rank[x] == self.rank[y]:\n            self.rank[x] += 1\n        self.count -= 1\n\nclass Solution:\n    def isBipartite(self, graph):\n        if graph == [[]]:\n            return True\n        uf = UnionFind(len(graph))\n        for i, nodes in enumerate(graph):\n            for j in nodes:\n                if uf.find_par(i) == uf.find_par(j):\n                    return False\n            for j in range(len(nodes)):\n                for k in range(j+1, len(nodes)):\n                    uf.unite(nodes[j], nodes[k])\n        return 1 < uf.count","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"is-graph-bipartite"}