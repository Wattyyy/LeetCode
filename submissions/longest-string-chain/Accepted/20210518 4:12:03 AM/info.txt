{"id":494553762,"lang":"python3","time":"1 month, 3 weeks","timestamp":1621278723,"status_display":"Accepted","runtime":"128 ms","url":"/submissions/detail/494553762/","is_pending":"Not Pending","title":"Longest String Chain","memory":"14.7 MB","code":"from typing import List\nfrom collections import deque\n\nclass Solution:\n    def longestStrChain(self, words: List[str]) -> int:\n        graph = {word:[] for word in words}\n        dist = {word:-1 for word in words}\n        for word in words:\n            for i in range(len(word)):\n                key = word[:i] + word[i+1:]    \n                if key in graph:\n                    graph[word].append(key)\n            \n        tmp = sorted([(len(word), word) for word in words], reverse=True)\n        for _, word in tmp:\n            if 1<= dist[word]:\n                continue\n            queue = deque([(word, 1)])\n            while queue:\n                key, cnt = queue.pop()\n                dist[key] = cnt\n                for nk in graph[key]:\n                    if dist[nk] < cnt + 1:\n                        queue.append((nk, cnt + 1))\n        return max(dist.values())\n ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-string-chain"}