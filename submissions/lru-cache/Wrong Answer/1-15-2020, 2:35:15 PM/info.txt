{"id":294347116,"lang":"python3","time":"1 year, 6 months","timestamp":1579066515,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/294347116/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"from collections import deque\nclass LRUCache:\n    def __init__(self, capacity):\n        self.cache = deque([])\n        self.capacity = capacity\n        self.dic = {}\n        \n    def get(self, key):\n        if key in self.dic.keys():\n            return self.dic[key]\n        else:\n            return -1\n        \n    def put(self, key, value):\n        if key in self.dic.keys():\n            return\n        if len(self.cache) == self.capacity:\n            evicted_key = self.cache.pop()\n            del self.dic[evicted_key]\n            self.cache.appendleft(key)\n            self.dic[key] = value\n        else:\n            self.cache.append(key)\n            self.dic[key] = value\n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"111110100100000000","title_slug":"lru-cache"}