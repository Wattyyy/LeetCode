// https://leetcode.com/problems/design-underground-system

from collections import defaultdict
class UndergroundSystem:

    def __init__(self):
        self.id2_station_time = defaultdict(list)
        self.st2_time_pop = defaultdict(list)
        
    def checkIn(self, id: int, stationName: str, t: int) -> None:
        self.id2_station_time[id] = [stationName, t]

    def checkOut(self, id: int, stationName: str, t: int) -> None:
        start, start_time = self.id2_station_time[id][0], self.id2_station_time[id][1]
        if (start, stationName) in self.st2_time_pop:
            old_time, old_pop = self.st2_time_pop[(start, stationName)][0], self.st2_time_pop[(start, stationName)][1]
            self.st2_time_pop[(start, stationName)] = [old_time + (t - start_time), old_pop + 1]
        else:
            self.st2_time_pop[(start, stationName)] = [t - start_time, 1]

    def getAverageTime(self, startStation: str, endStation: str) -> float:
        time = self.st2_time_pop[(startStation, endStation)][0] 
        pop = self.st2_time_pop[(startStation, endStation)][1] 
        return time / pop


# Your UndergroundSystem object will be instantiated and called as such:
# obj = UndergroundSystem()
# obj.checkIn(id,stationName,t)
# obj.checkOut(id,stationName,t)
# param_3 = obj.getAverageTime(startStation,endStation)