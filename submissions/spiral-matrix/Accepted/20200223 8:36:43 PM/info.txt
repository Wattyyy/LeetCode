{"id":306075612,"lang":"python3","time":"1 year, 4 months","timestamp":1582457803,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/306075612/","is_pending":"Not Pending","title":"Spiral Matrix","memory":"12.8 MB","code":"class Solution:\n    def spiralOrder(self, matrix):\n        if not matrix:\n            return []\n        R, C = len(matrix), len(matrix[0])\n        visited = set()\n        ans = []\n        def go_right(r, c):\n            if r < 0 or R <= r or c < 0 or C <= c:\n                return\n            elif (r, c) in visited:\n                if (r + 1, c - 1) not in visited:\n                    go_lower(r + 1, c - 1)\n                else:\n                    return\n            else:\n                ans.append(matrix[r][c])\n                visited.add((r, c))\n                if c == C - 1:\n                    go_lower(r + 1, c)\n                else:\n                    go_right(r, c + 1)\n\n        def go_lower(r, c):\n            if r < 0 or R <= r or c < 0 or C <= c:\n                return\n            elif (r, c) in visited:\n                if (r - 1, c - 1) not in visited:\n                    go_left(r - 1, c - 1)\n                else:\n                    return\n            else:\n                ans.append(matrix[r][c])\n                visited.add((r, c))\n                if r == R - 1:\n                    go_left(r, c - 1)\n                else:\n                    go_lower(r + 1, c )\n\n\n        def go_left(r, c):\n            if r < 0 or R <= r or c < 0 or C <= c:\n                return\n            elif (r, c) in visited:\n                if (r - 1, c + 1) not in visited:\n                    go_upper(r - 1, c + 1)\n                else:\n                    return\n            else:\n                ans.append(matrix[r][c])\n                visited.add((r, c))\n                if c == 0:\n                    go_upper(r - 1, c)\n                else:\n                    go_left(r, c - 1)\n\n\n        def go_upper(r, c):\n            if r < 0 or R <= r or c < 0 or C <= c:\n                return\n            if (r, c) in visited:\n                if (r + 1, c + 1) not in visited:\n                    go_right(r + 1, c + 1)\n                else:\n                    return\n            else:\n                ans.append(matrix[r][c])\n                visited.add((r, c))\n                go_upper(r - 1, c )\n\n        go_right(0, 0)\n        return ans\n","compare_result":"1111111111111111111111","title_slug":"spiral-matrix"}