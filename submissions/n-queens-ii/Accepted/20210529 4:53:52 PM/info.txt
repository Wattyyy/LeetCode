{"id":499755246,"lang":"python3","time":"1 month, 2 weeks","timestamp":1622274832,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/499755246/","is_pending":"Not Pending","title":"N-Queens II","memory":"14.3 MB","code":"from collections import Counter\n\nclass Solution:\n    def __init__(self):\n        self.vertical = set()\n        self.diagonal = Counter()\n        self.ans = 0\n\n    def add_diag(self, row, col, n):\n        # lower left\n        r, c = row + 1, col - 1\n        while r < n and 0 <= c:\n            self.diagonal[(r, c)] += 1\n            r += 1\n            c -= 1\n        # lower right\n        r, c = row + 1, col + 1\n        while r < n and c < n:\n            self.diagonal[(r, c)] += 1\n            r += 1\n            c += 1\n    \n    def subtract_diag(self, row, col, n):\n        # lower left\n        r, c = row + 1, col - 1\n        while r < n and 0 <= c:\n            self.diagonal[(r, c)] -= 1\n            r += 1\n            c -= 1\n        # lower right\n        r, c = row + 1, col + 1\n        while r < n and c < n:\n            self.diagonal[(r, c)] -= 1\n            r += 1\n            c += 1\n\n    def recursion(self, row, n):\n        if row == n:\n            self.ans += 1\n            return\n        for col in range(n):\n            if (col not in self.vertical) and (self.diagonal[(row, col)] == 0):\n                self.vertical.add(col)\n                self.add_diag(row, col, n)\n                self.recursion(row + 1, n)\n                self.vertical.remove(col)\n                self.subtract_diag(row, col, n)\n\n    def totalNQueens(self, n: int) -> int:\n        self.recursion(0, n)\n        return self.ans\n        \n\n        \n        \n\n        ","compare_result":"111111111","title_slug":"n-queens-ii"}