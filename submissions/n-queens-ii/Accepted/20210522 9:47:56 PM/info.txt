{"id":496638318,"lang":"python3","time":"1 month, 3 weeks","timestamp":1621687676,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/496638318/","is_pending":"Not Pending","title":"N-Queens II","memory":"14.3 MB","code":"from typing import List\nfrom collections import Counter\n\nclass Solution:\n    def __init__(self):\n        self.ans = 0\n        self.col_visited = set()\n        self.diag_visited = Counter()\n\n    def diag_add(self, row, col, n):\n        # lower left\n        r, c = row + 1, col - 1\n        while r < n and 0 <= c:\n            self.diag_visited[(r, c)] += 1\n            r += 1\n            c -= 1\n        # lower right\n        r, c = row + 1, col + 1\n        while r < n and c < n:\n            self.diag_visited[(r, c)] += 1\n            r += 1\n            c += 1\n        \n    def diag_remove(self, row, col, n):\n        # lower left\n        r, c = row + 1, col - 1\n        while r < n and 0 <= c:\n            self.diag_visited[(r, c)] -= 1\n            r += 1\n            c -= 1\n        # lower right\n        r, c = row + 1, col + 1\n        while r < n and c < n:\n            self.diag_visited[(r, c)] -= 1\n            r += 1\n            c += 1\n    \n    def backtrack(self, row, n):\n        if row == n:\n            self.ans += 1\n            return\n\n        for col in range(n):\n            if (col not in self.col_visited) and (self.diag_visited[(row, col)] == 0):\n                self.col_visited.add(col)\n                self.diag_add(row, col, n)\n                self.backtrack(row+1, n)\n                self.col_visited.remove(col)\n                self.diag_remove(row, col, n)\n                \n    def totalNQueens(self, n: int) -> List[List[str]]:\n        self.backtrack(0, n)\n        return self.ans\n","compare_result":"111111111","title_slug":"n-queens-ii"}