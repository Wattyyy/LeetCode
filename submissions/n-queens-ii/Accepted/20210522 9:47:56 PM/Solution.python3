// https://leetcode.com/problems/n-queens-ii

from typing import List
from collections import Counter

class Solution:
    def __init__(self):
        self.ans = 0
        self.col_visited = set()
        self.diag_visited = Counter()

    def diag_add(self, row, col, n):
        # lower left
        r, c = row + 1, col - 1
        while r < n and 0 <= c:
            self.diag_visited[(r, c)] += 1
            r += 1
            c -= 1
        # lower right
        r, c = row + 1, col + 1
        while r < n and c < n:
            self.diag_visited[(r, c)] += 1
            r += 1
            c += 1
        
    def diag_remove(self, row, col, n):
        # lower left
        r, c = row + 1, col - 1
        while r < n and 0 <= c:
            self.diag_visited[(r, c)] -= 1
            r += 1
            c -= 1
        # lower right
        r, c = row + 1, col + 1
        while r < n and c < n:
            self.diag_visited[(r, c)] -= 1
            r += 1
            c += 1
    
    def backtrack(self, row, n):
        if row == n:
            self.ans += 1
            return

        for col in range(n):
            if (col not in self.col_visited) and (self.diag_visited[(row, col)] == 0):
                self.col_visited.add(col)
                self.diag_add(row, col, n)
                self.backtrack(row+1, n)
                self.col_visited.remove(col)
                self.diag_remove(row, col, n)
                
    def totalNQueens(self, n: int) -> List[List[str]]:
        self.backtrack(0, n)
        return self.ans
