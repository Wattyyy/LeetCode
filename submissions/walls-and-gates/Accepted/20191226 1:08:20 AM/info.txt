{"id":288477156,"lang":"python3","time":"1 year, 6 months","timestamp":1577290100,"status_display":"Accepted","runtime":"372 ms","url":"/submissions/detail/288477156/","is_pending":"Not Pending","title":"Walls and Gates","memory":"14.9 MB","code":"from collections import deque\nclass Solution:\n    def wallsAndGates(self, rooms):\n        if not rooms:\n            return None\n        M, N = len(rooms), len(rooms[0])\n        def bfs(m, n):\n            vectors = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n            queue = deque([(m, n)])\n            while queue:\n                y_1, x_1 = queue.popleft()\n                for vec in vectors:\n                    y_2 = y_1 + vec[0]\n                    x_2 = x_1 + vec[1]\n                    if 0 <= y_2 and y_2 < M and 0 <= x_2 and x_2 < N and rooms[y_1][x_1] < rooms[y_2][x_2]:\n                        queue.append((y_2, x_2))\n                        rooms[y_2][x_2] = rooms[y_1][x_1] + 1\n\n        for m in range(M):\n            for n in range(N):\n                if rooms[m][n]==0:\n                    bfs(m, n)\n                \n\n\n    \n        \n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"walls-and-gates"}