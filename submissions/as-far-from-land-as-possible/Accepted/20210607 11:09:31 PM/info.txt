{"id":504427452,"lang":"rust","time":"1Â month","timestamp":1623074971,"status_display":"Accepted","runtime":"1740 ms","url":"/submissions/detail/504427452/","is_pending":"Not Pending","title":"As Far from Land as Possible","memory":"2.8 MB","code":"use std::cmp;\n\nimpl Solution {\n    pub fn max_distance(grid: Vec<Vec<i32>>) -> i32 {\n        let mut water = Vec::new();\n        let mut island = Vec::new();\n        for r in 0..grid.len() {\n            for c in 0..grid[0].len() {\n                if grid[r][c] == 0 {\n                    water.push(vec![r as i32, c as i32]);\n                }\n                else {\n                    island.push(vec![r as i32, c as i32]);\n                }\n            }\n        }\n        if water.len() == 0 || island.len() == 0 {\n            return -1\n        }\n\n        let mut res = 0;\n        for wv in water.iter() {\n            let mut tmp = 200;\n            for iv in island.iter() {\n                tmp = cmp::min(tmp, (wv[0] - iv[0]).abs() + (wv[1] - iv[1]).abs());\n            }\n            res = cmp::max(res, tmp);\n        }\n        return res\n    }\n}","compare_result":"11111111111111111111111111111111111","title_slug":"as-far-from-land-as-possible"}