{"id":472240235,"lang":"python3","time":"3 months, 2 weeks","timestamp":1616665476,"status_display":"Accepted","runtime":"288 ms","url":"/submissions/detail/472240235/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"15.6 MB","code":"from collections import deque\nclass Solution:\n    def pacificAtlantic(self, matrix):\n        if not matrix or len(matrix) == 0:\n            return []\n        pacific_queue, atlantic_queue = deque([]), deque([])\n        pacific_set, atlantic_set = set(), set()\n        R, C = len(matrix), len(matrix[0])\n        for r in range(R):\n            for c in range(C):\n                if r == 0 or c == 0:\n                    pacific_queue.append((r, c))\n                    pacific_set.add((r, c))\n                if r == R - 1 or c == C - 1:\n                    atlantic_queue.append((r, c))\n                    atlantic_set.add((r, c))\n        \n        while pacific_queue:\n            r, c = pacific_queue.popleft()\n            nexts = [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]\n            for nr, nc in nexts:\n                if (0 <= nr < R) and (0 <= nc < C) and (matrix[r][c] <= matrix[nr][nc]) and ((nr, nc) not in pacific_set):\n                    pacific_set.add((nr, nc))\n                    pacific_queue.append((nr, nc))\n\n        while atlantic_queue:\n            r, c = atlantic_queue.popleft()\n            nexts = [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]\n            for nr, nc in nexts:\n                if (0 <= nr < R) and (0 <= nc < C) and (matrix[r][c] <= matrix[nr][nc]) and ((nr, nc) not in atlantic_set):\n                    atlantic_set.add((nr, nc))\n                    atlantic_queue.append((nr, nc))\n\n        \n        ret = pacific_set.intersection(atlantic_set)\n        return list(ret)\n                    \n\n\n\n\n            \n        \n         ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pacific-atlantic-water-flow"}