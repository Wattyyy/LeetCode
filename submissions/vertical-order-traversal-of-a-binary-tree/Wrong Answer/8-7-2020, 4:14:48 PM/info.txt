{"id":377341258,"lang":"python3","time":"11 months, 1 week","timestamp":1596784488,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/377341258/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\nclass Solution:\n    def __init__(self):\n        self.dict = defaultdict(list)\n\n    def traverse(self, node, x):\n        self.dict[x].append(node.val)\n        if node.left:\n            self.traverse(node.left, x-1)\n        if node.right:\n            self.traverse(node.right, x+1)\n        \n    def verticalTraversal(self, root):\n        if not root:\n            return []\n        self.traverse(root, 0)\n        ans = []\n        keys = sorted(self.dict.keys())\n        for key in keys:\n            ans.append(self.dict[key])\n        return ans\n\n        \n        ","compare_result":"111111111011000000000000000000","title_slug":"vertical-order-traversal-of-a-binary-tree"}