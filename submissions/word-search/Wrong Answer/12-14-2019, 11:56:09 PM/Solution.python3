// https://leetcode.com/problems/word-search

class Solution:
    def exist(self, board, word):
        def search(h, w, idx, visited):
            if idx==len(word):
                return True
            if (h+1<H) and (word[idx]==board[h+1][w]) and ((h+1, w) not in visited):
                visited.add((h+1, w))
                return search(h+1, w, idx+1, visited)
            if (0<=h-1) and (word[idx]==board[h-1][w]) and ((h-1, w) not in visited):
                visited.add((h-1, w))
                return search(h-1, w, idx+1, visited)
            if (w+1<W) and (word[idx]==board[h][w+1]) and ((h, w+1) not in visited):
                visited.add((h, w+1))
                return search(h, w+1, idx+1, visited)
            if (0<=w-1) and (word[idx]==board[h][w-1]) and ((h, w-1) not in visited):
                visited.add((h, w-1))
                return search(h, w-1, idx+1, visited)
            else:
                return False
            
        if not board and not word:
            return True
        if not board or not word:
            return False
        H, W = len(board), len(board[0])
        for h in range(H):
            for w in range(W):
                visited = set()
                if board[h][w]!=word[0]:
                    continue
                if len(word)==1:
                    return True
                idx = 1
                visited.add((h, w))
                if search(h, w, idx, visited):
                    return True     
        return False