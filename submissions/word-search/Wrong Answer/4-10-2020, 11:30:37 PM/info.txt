{"id":322644532,"lang":"python3","time":"1 year, 3 months","timestamp":1586529037,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/322644532/","is_pending":"Not Pending","title":"Word Search","memory":"N/A","code":"class Solution:\n    def exist(self, board, word):\n        R, C = len(board), len(board[0])\n        self.flag = False\n        def backtrack(y, x, visited=set(), tmp=[]):\n            if len(tmp) == len(word):\n                self.flag = True\n                return\n            idx = len(tmp)\n            nexts = [(y + 1, x), (y - 1, x), (y, x + 1), (y, x - 1)]\n            for ny, nx in nexts:\n                if 0 <= ny and ny < R and 0 <= nx and nx < C:\n                    if ( (ny, nx) not in visited ) and ( board[ny][nx] == word[idx]):\n                        visited.add((ny, nx))\n                        tmp.append(word[idx])\n                        backtrack(ny, nx, visited, tmp)\n                        visited.remove((ny, nx))\n                        tmp.pop(-1)\n            \n        for r in range(R):\n            for c in range(C):\n                if board[r][c] == word[0]:\n                    backtrack(r, c, tmp=[word[0]])\n                    \n        return self.flag\n","compare_result":"11111111011011111111111111111111111111110111111111111111111111111111111111111111111111000","title_slug":"word-search"}