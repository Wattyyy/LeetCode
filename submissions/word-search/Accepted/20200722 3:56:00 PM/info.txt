{"id":370016708,"lang":"python3","time":"11 months, 3 weeks","timestamp":1595400960,"status_display":"Accepted","runtime":"340 ms","url":"/submissions/detail/370016708/","is_pending":"Not Pending","title":"Word Search","memory":"15 MB","code":"class Solution:\n    def __init__(self):\n        self.ans = False\n    \n    def backtrack(self, current_length, visited, y, x, board, word):\n        if self.ans:\n            return\n        if current_length == len(word):\n            self.ans = True\n            return\n        nexts = [(y+1, x), (y-1, x), (y, x+1), (y, x-1)]\n        for ny, nx in nexts:\n            if 0 <= ny < len(board) and 0 <= nx < len(board[0]) and (ny, nx) not in visited and word[current_length] == board[ny][nx]:\n                    visited.add((ny, nx))\n                    self.backtrack(current_length+1, visited, ny, nx, board, word)\n                    visited.remove((ny, nx))\n\n    def exist(self, board, word):\n        for y in range(len(board)):\n            for x in range(len(board[0])):\n                if board[y][x] == word[0]:\n                    visited = {(y, x)}\n                    self.backtrack(1, visited, y, x, board, word)\n        return self.ans","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search"}