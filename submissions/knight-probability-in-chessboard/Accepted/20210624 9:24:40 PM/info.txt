{"id":512537397,"lang":"python3","time":"2 weeks, 5 days","timestamp":1624537480,"status_display":"Accepted","runtime":"484 ms","url":"/submissions/detail/512537397/","is_pending":"Not Pending","title":"Knight Probability in Chessboard","memory":"17.8 MB","code":"class Solution:\n    def knightProbability(self, n: int, k: int, row: int, column: int) -> float:\n        dp = [[[0 for _ in range(k+1)] for __ in range(n)] for ___ in range(n)]\n        for r in range(n):\n            for c in range(n):\n                dp[r][c][0] = 1\n        \n        for mv in range(1, k + 1):\n            for r in range(n):\n                for c in range(n):\n                    nexts = [(r-2, c+1), (r-1, c+2), (r+1, c+2), (r+2, c+1),\n                             (r+2, c-1), (r+1, c-2), (r-1, c-2), (r-2, c-1)]\n                    for nr, nc in nexts:\n                        if 0 <= nr < n and 0 <= nc < n:\n                            dp[r][c][mv] += dp[nr][nc][mv-1]\n        \n        return dp[row][column][k] / (pow(8, k))\n            \n            ","compare_result":"1111111111111111111111","title_slug":"knight-probability-in-chessboard"}