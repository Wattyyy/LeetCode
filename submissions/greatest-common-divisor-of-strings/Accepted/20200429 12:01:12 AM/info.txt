{"id":331391863,"lang":"python3","time":"1 year, 2 months","timestamp":1588086072,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/331391863/","is_pending":"Not Pending","title":"Greatest Common Divisor of Strings","memory":"13.8 MB","code":"class Solution:\n    def make_divisors(self, n):\n        divisors = []\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n//i)\n        return divisors\n\n\n    def gcdOfStrings(self, str1, str2):\n        if len(str1) == 0 or len(str2) == 0:\n            return ''\n        if len(str1) < len(str2):\n            str1, str2 = str2, str1\n        divisors = self.make_divisors(len(str2))\n        ans = [0, '']\n        for d in divisors:\n            x = str2[:d]\n            divisible_1 = True\n            divisible_2 = True\n            for idx in range(0, len(str2), d):\n                if x != str2[idx:d+idx]:\n                    divisible_2 = False\n                if not divisible_2:\n                    break\n            if divisible_2:\n                for idx in range(0, len(str1), d):\n                    if x != str1[idx:d+idx]:\n                        divisible_1 = False\n                    if not divisible_1:\n                        break\n            if divisible_1 and divisible_2 and len(x) > ans[0]:\n                ans = [len(x), x]\n        \n        return ans[1]\n\n\n        \n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"greatest-common-divisor-of-strings"}