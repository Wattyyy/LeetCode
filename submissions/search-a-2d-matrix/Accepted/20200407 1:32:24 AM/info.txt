{"id":320749508,"lang":"python3","time":"1 year, 3 months","timestamp":1586190744,"status_display":"Accepted","runtime":"132 ms","url":"/submissions/detail/320749508/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"15.9 MB","code":"from bisect import bisect_right\nclass Solution:\n    def searchMatrix(self, matrix, target):\n        if matrix == [[]] or matrix == []:\n            return False\n        \n        R, C = len(matrix), len(matrix[0])\n        if R == 1:\n            idx = bisect_right(matrix[0], target)\n            if idx == 0:\n                return False\n            else:\n                return (matrix[0][idx-1] == target)\n        \n        top, bottom = 0, R - 1\n        while top < bottom:\n            mid = (top + bottom) // 2\n            if matrix[mid][0] == target:\n                return True\n            elif target < matrix[mid][0]:\n                bottom = mid - 1\n            else:\n                if mid == R - 1:\n                    bottom = R - 1\n                    break\n                elif target < matrix[mid+1][0]:\n                    bottom = mid\n                    break\n                else:\n                    top = mid + 1\n        idx = bisect_right(matrix[bottom], target)\n        if idx == 0:\n            return False\n        else:\n            return (matrix[bottom][idx-1] == target)\n        \n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix"}