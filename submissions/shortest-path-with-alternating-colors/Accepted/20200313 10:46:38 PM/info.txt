{"id":312078069,"lang":"python3","time":"1 year, 4 months","timestamp":1584107198,"status_display":"Accepted","runtime":"92 ms","url":"/submissions/detail/312078069/","is_pending":"Not Pending","title":"Shortest Path with Alternating Colors","memory":"12.8 MB","code":"from collections import defaultdict, deque\nclass Solution:\n    def shortestAlternatingPaths(self, n, red_edges, blue_edges):\n        graph = defaultdict(list)\n        for u, v in red_edges:\n            graph[u].append([v, 'R'])\n        for u, v in blue_edges:\n            graph[u].append([v, 'B'])\n        ans = [float('inf')] * n\n        visited = set()\n        queue = deque([(0, 0, 'N')])\n        while queue:\n            node, count, color = queue.popleft()\n            ans[node] = min(ans[node], count)\n            visited.add((node, color))\n            for nx_node, nx_color in graph[node]:\n                if nx_color == color or (nx_node, nx_color) in visited:\n                    continue\n                queue.append((nx_node, count+1, nx_color))\n        for i, a in enumerate(ans):\n            if a == float('inf'):\n                ans[i] = -1\n        return ans\n                \n                \n\n        \n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-with-alternating-colors"}