{"id":310595880,"lang":"python3","time":"1 year, 4 months","timestamp":1583686649,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/310595880/","is_pending":"Not Pending","title":"Maximum Sum BST in Binary Tree","memory":"70.8 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\nimport sys\nsys.setrecursionlimit(10 ** 6)\nclass Solution:\n    def maxSumBST(self, root):\n        if not root:\n            return 0\n        self.ans = 0\n        def dp(node):\n            \"\"\" Calculate maximum sum using input node.\n            @returns\n                bst_sum: int  - Maximum sum.\n                is_bst:  bool - Subtree including input node is BST or not BST.\n                min_val: int  - Minimum value of subtree including input node\n                max_val: int  - Maximum value of subtree including input node\n            \"\"\"\n\n            if not node.left and not node.right:\n                self.ans = max(self.ans, node.val)\n                return node.val, True, node.val, node.val\n                \n            elif node.left and not node.right:\n                l_sum, is_bst, min_val, max_val = dp(node.left)\n                if is_bst and max_val < node.val:\n                    self.ans = max(self.ans, l_sum + node.val)\n                    return l_sum + node.val, True, min_val, node.val\n                else:\n                    return 0, False, 0, 0\n\n            elif not node.left and node.right:\n                r_sum, is_bst, min_val, max_val = dp(node.right)\n                if is_bst and node.val < min_val:\n                    self.ans = max(self.ans, node.val + r_sum)\n                    return node.val + r_sum, True, node.val, max_val\n                else:\n                    return 0, False, 0, 0\n\n            else:\n                l_sum, l_is_bst, l_min_val, l_max_val = dp(node.left)\n                r_sum, r_is_bst, r_min_val, r_max_val = dp(node.right)\n                if l_is_bst and r_is_bst and l_max_val < node.val and node.val < r_min_val:\n                    self.ans = max(self.ans, l_sum + node.val + r_sum)\n                    return l_sum + node.val + r_sum, True, l_min_val, r_max_val\n                else:\n                    return 0, False, 0, 0\n            \n        dp(root)\n        return self.ans\n                \n                \n","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-bst-in-binary-tree"}