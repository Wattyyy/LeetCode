{"id":287568714,"lang":"python3","time":"1 year, 6 months","timestamp":1576954553,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/287568714/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"20 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass BSTIterator:\n    def __init__(self, root):\n        self.bst_list = []\n        self.root = root\n        self.helper(self.root)\n        self.pointer = 0\n        \n    def helper(self, root):\n        if root:\n            self.helper(root.left)\n            self.bst_list.append(root.val)\n            self.helper(root.right)\n    \n    def next(self):\n        res = self.bst_list[self.pointer]\n        self.pointer += 1\n        return res\n        \n\n    def hasNext(self):\n        if self.pointer<len(self.bst_list):\n            return True\n        else:\n            return False\n        \n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}