{"id":510657554,"lang":"python3","time":"3 weeks, 2 days","timestamp":1624199989,"status_display":"Accepted","runtime":"148 ms","url":"/submissions/detail/510657554/","is_pending":"Not Pending","title":"Swim in Rising Water","memory":"15 MB","code":"from collections import deque\nfrom typing import List\n\nclass Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n        N = len(grid)\n        min_val = max(grid[0][0], grid[-1][-1])\n        for v in range(min_val, N * N):\n            visited = {(0, 0)}\n            queue = deque([(0, 0)])\n            while queue:\n                y, x = queue.popleft()\n                if y == N - 1 and x == N - 1:\n                    return v\n                nexts = [(y+1, x), (y-1, x), (y, x+1), (y, x-1)]\n                for ny, nx in nexts:\n                    if 0 <= ny < N and 0 <= nx < N and (ny, nx) not in visited and grid[ny][nx] <= v:\n                        queue.append((ny, nx))\n                        visited.add((ny, nx))\n            \n","compare_result":"11111111111111111111111111111111111111111","title_slug":"swim-in-rising-water"}