{"id":345326975,"lang":"python3","time":"1 year, 1 month","timestamp":1590566664,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/345326975/","is_pending":"Not Pending","title":"Possible Bipartition","memory":"N/A","code":"from collections import defaultdict, deque\nclass Solution:\n    def possibleBipartition(self, N, dislikes):\n        if dislikes == [[]]:\n            return True\n        graph = defaultdict(list)\n        for u, v in dislikes:\n            graph[u].append(v)\n            graph[v].append(u)\n\n        visited = set()\n        for i in range(1, N+1):\n            if i in visited:\n                continue\n            queue = deque([i])\n            while queue:\n                v = queue.popleft()\n                if v in visited:\n                    return False\n                visited.add(v)\n                for nv in graph[v]:\n                    if nv not in visited:\n                        queue.append(nv)\n        return True\n\n","compare_result":"111111110111010101010101010101010101010101010101010101010101010101","title_slug":"possible-bipartition"}