// https://leetcode.com/problems/maximum-depth-of-binary-tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x): 
#         self.val = x 
#         self.left = None
#         self.right = None

class Solution:
    def __init__(self):
        self.dpts = []
            
    def maxDepth(self, root: TreeNode) -> int:
        if root is None:
            return 0
        dpt = 1 
        self.check_child(root, dpt)
        return max(self.dpts)
            
    def check_child(self, node, dpt):
        if node.left is None and node.right is None:
            self.dpts.append(dpt)
            return
            
        elif node.left is None:
            self.check_child(node.right, dpt+1)

        elif node.right is None:
            self.check_child(node.left, dpt+1)
            
        else:
            self.check_child(node.left, dpt+1)
            self.check_child(node.right, dpt+1)