{"id":314762887,"lang":"python3","time":"1 year, 3 months","timestamp":1584857709,"status_display":"Accepted","runtime":"184 ms","url":"/submissions/detail/314762887/","is_pending":"Not Pending","title":"Minimum Path Sum","memory":"14.7 MB","code":"class Solution:\n    def minPathSum(self, grid):\n        if not grid or grid == [[]]:\n            return 0\n        R, C = len(grid), len(grid[0])\n        new = [[float('inf') for _ in range(C)] for __ in range(R)]\n        new[0][0] = grid[0][0]\n        queue = [(0, 0)]\n        while queue:\n            y, x = queue.pop(0) \n            if y + 1 < R and (new[y][x] + grid[y + 1][x] < new[y + 1][x]):\n                new[y+1][x] = new[y][x] + grid[y+1][x]\n                queue.append((y + 1, x))\n            if x + 1 < C and (new[y][x] + grid[y][x + 1] < new[y][x + 1]):\n                new[y][x + 1] = new[y][x] + grid[y][x + 1]\n                queue.append((y, x + 1))\n                \n        return new[-1][-1]\n            \n\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-path-sum"}