{"id":378742231,"lang":"python3","time":"11 months, 1 week","timestamp":1597039802,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/378742231/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"13.8 MB","code":"from collections import deque\nclass Solution:\n    def orangesRotting(self, grid):\n        R, C = len(grid), len(grid[0])\n        fresh_flag = False\n        queue = deque([])\n        for r in range(R):\n            for c in range(C):\n                if grid[r][c] == 2:\n                    queue.append((r, c))\n                if grid[r][c] == 1:\n                    fresh_flag = True\n\n        if not queue and fresh_flag:\n            return -1\n\n        cnt = 0\n        while queue:\n            new_queue = deque([])\n            for r, c in queue:\n                nexts = [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]\n                for ny, nx in nexts:\n                    if (0 <= ny < R) and (0 <= nx < C) and (grid[ny][nx] == 1):\n                        grid[ny][nx] = 2\n                        new_queue.append((ny, nx))            \n            if 0 < len(new_queue):\n                cnt += 1\n            queue = new_queue\n\n\n        for r in range(R):\n            for c in range(C):\n                if grid[r][c] == 1:\n                    return -1\n        return cnt\n\n            \n                    \n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges"}