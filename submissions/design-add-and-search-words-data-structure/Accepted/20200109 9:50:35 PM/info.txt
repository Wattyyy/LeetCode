{"id":292656854,"lang":"python3","time":"1 year, 6 months","timestamp":1578574235,"status_display":"Accepted","runtime":"384 ms","url":"/submissions/detail/292656854/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"28.8 MB","code":"from collections import defaultdict\n\nclass TrieNode:\n    def __init__(self):\n        self.children_map = defaultdict(TrieNode)\n        self.is_word = False\n        \nclass WordDictionary:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def addWord(self, word):\n        cur = self.root\n        for char in word:\n            if char not in cur.children_map.keys():\n                cur.children_map[char] = TrieNode()\n            cur = cur.children_map[char]\n        cur.is_word = True\n    \n    def search(self, word):\n        self.is_find = False\n        def helper(cur, word, i, L):\n            if i==L:\n                if cur.is_word:\n                    self.is_find = True\n                    return \n                else:\n                    return\n            char = word[i]\n            if char==\".\":\n                if not cur.children_map.keys():\n                    return \n                for key in cur.children_map.keys():\n                    node = cur.children_map[key]\n                    helper(node, word, i+1, L)\n            else:\n                if char not in cur.children_map.keys():\n                    return \n                node = cur.children_map[char]\n                helper(node, word, i+1, L)\n        L = len(word)\n        cur = self.root\n        helper(cur, word, 0, L)\n        return self.is_find\n            \n        \n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)","compare_result":"1111111111111","title_slug":"design-add-and-search-words-data-structure"}