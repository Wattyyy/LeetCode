{"id":376381561,"lang":"python3","time":"11 months, 1 week","timestamp":1596613463,"status_display":"Accepted","runtime":"536 ms","url":"/submissions/detail/376381561/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"30 MB","code":"from collections import defaultdict\n\nclass TrieNode:\n    def __init__(self):\n        self.is_word = False\n        self.children = defaultdict(TrieNode)\n\n\n\nclass WordDictionary:\n\n    def __init__(self):\n        self.root = TrieNode()\n\n    def addWord(self, word):\n        cur = self.root\n        for char in word:\n            if char not in cur.children:\n                cur.children[char] = TrieNode()\n            cur = cur.children[char]\n        cur.is_word = True\n\n    def backtrack(self, word, index, cur):\n        if index == len(word):\n            if cur.is_word:\n                self.res = True\n            return\n        if word[index] == '.':\n            for _, next_node in cur.children.items():\n                self.backtrack(word, index+1, next_node)\n        elif word[index] in cur.children:\n            char = word[index]\n            next_node = cur.children[char]\n            self.backtrack(word, index+1, next_node)\n        else:\n            return\n        \n\n\n\n    def search(self, word):\n        self.res = False\n        cur = self.root\n        self.backtrack(word, 0, cur)\n        return self.res\n        \n        \n    \n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)","compare_result":"1111111111111","title_slug":"design-add-and-search-words-data-structure"}