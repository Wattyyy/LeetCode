{"id":386544670,"lang":"python3","time":"10 months, 3 weeks","timestamp":1598425658,"status_display":"Accepted","runtime":"332 ms","url":"/submissions/detail/386544670/","is_pending":"Not Pending","title":"The Maze","memory":"15.1 MB","code":"from collections import defaultdict\nfrom bisect import bisect_left\n\nclass Solution:\n    def dfs(self, y, x, maze, visited):\n        visited[y][x] = 1\n        \n        # move right\n        idx = bisect_left(self.row_walls[y], x)\n        next_x = self.row_walls[y][idx] - 1 \n        if visited[y][next_x] == 0:\n            self.dfs(y, next_x, maze, visited)\n        \n        # move left\n        idx = bisect_left(self.row_walls[y], x)\n        next_x = self.row_walls[y][idx-1] + 1 \n        if visited[y][next_x] == 0:\n            self.dfs(y, next_x, maze, visited)\n        \n        # move up\n        idx = bisect_left(self.col_walls[x], y)\n        next_y = self.col_walls[x][idx-1] + 1 \n        if visited[next_y][x] == 0:\n            self.dfs(next_y, x, maze, visited)\n        \n        # move down\n        idx = bisect_left(self.col_walls[x], y)\n        next_y = self.col_walls[x][idx] - 1 \n        if visited[next_y][x] == 0:\n            self.dfs(next_y, x, maze, visited)\n\n    def hasPath(self, maze: List[List[int]], start: List[int], destination: List[int]) -> bool:\n        row_walls, col_walls = defaultdict(list), defaultdict(list)\n        R, C = len(maze), len(maze[0])\n        visited = [[0 for _ in range(C)] for __ in range(R)]\n        for r in range(R):\n            for c in range(C):\n                if c == 0:\n                    row_walls[r].append(-1)\n                if maze[r][c] == 1:\n                    row_walls[r].append(c)\n                if c == C - 1:\n                    row_walls[r].append(C)\n        \n        for c in range(C):\n            for r in range(R):\n                if r == 0:\n                    col_walls[c].append(-1)\n                if maze[r][c] == 1:\n                    col_walls[c].append(r)\n                if r == R - 1:\n                    col_walls[c].append(R)\n        \n        self.row_walls, self.col_walls = row_walls, col_walls\n        self.dfs(start[0], start[1], maze, visited)\n        \n        if visited[destination[0]][destination[1]]:\n            return True\n        else:\n            return False\n\n                \n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-maze"}