{"id":316604570,"lang":"python3","time":"1 year, 3 months","timestamp":1585366022,"status_display":"Accepted","runtime":"824 ms","url":"/submissions/detail/316604570/","is_pending":"Not Pending","title":"Total Hamming Distance","memory":"15.2 MB","code":"from collections import Counter\nclass Solution:\n    def __init__(self):\n        self.count = Counter()\n        \n    def bitcount(self, num):\n        cnt = 0\n        while num:\n            if num & 1:\n                self.count[cnt] += 1\n            cnt += 1\n            num = num >> 1\n\n    def totalHammingDistance(self, nums):\n        if not nums:\n            return 0\n        N = len(nums)\n        for num in nums:\n            self.bitcount(num)\n        res = 0\n        for key in self.count:\n            res += (N - self.count[key]) * self.count[key]\n        return res\n\n        ","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"total-hamming-distance"}