{"id":470524971,"lang":"python3","time":"3 months, 3 weeks","timestamp":1616319060,"status_display":"Accepted","runtime":"1480 ms","url":"/submissions/detail/470524971/","is_pending":"Not Pending","title":"Maximize Score After N Operations","memory":"16.2 MB","code":"from itertools import combinations\nfrom math import gcd\nimport sys\nsys.setrecursionlimit(10 ** 6)\n\nclass Solution:\n    def maxScore(self, nums):\n        N = len(nums)\n        dp = [-1] * (2 ** N)\n        gcds = {(i, j): gcd(nums[i], nums[j]) for (i, j) in combinations(range(N), 2)}\n\n        def rec(bitmask):\n            if -1 < dp[bitmask]:\n                return dp[bitmask]\n            if bitmask == 0:\n                return 0\n            idx_list = [idx for idx in range(N) if (bitmask & (1 << idx))]\n            ret = -float('INF')\n            for i, j in combinations(idx_list, 2):\n                if bitmask & (1 << i) and bitmask & (1 << j):\n                    new_bitmask = bitmask ^ (1 << i) ^ (1 << j)\n                    ret = max( ret, rec(new_bitmask) + gcds[(i, j)] * (1 + (N - len(idx_list)) // 2) )\n            dp[bitmask] = ret\n            return ret\n        \n        res = rec(2 ** N - 1)\n        return res","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximize-score-after-n-operations"}