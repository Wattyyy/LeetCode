{"id":263182164,"lang":"python3","time":"1 year, 9 months","timestamp":1569164282,"status_display":"Accepted","runtime":"252 ms","url":"/submissions/detail/263182164/","is_pending":"Not Pending","title":"Number of Provinces","memory":"13.9 MB","code":"class UnionFind():\n    def __init__(self, N):\n        self.node2par = {i:i for i in range(N)}\n        self.rank = {i:0 for i in range(N)}\n        self.count = N\n        \n    def find_par(self, x):\n        if self.node2par[x]==x:\n            return x\n        else:\n            x = self.find_par(self.node2par[x])\n            return x\n    \n    def unite(self, x, y):\n        x, y = self.find_par(x), self.find_par(y)\n        if x==y:\n            return\n        if self.rank[x]<self.rank[y]:\n            self.node2par[x] = y\n        else:\n            self.node2par[y] = x\n        if self.rank[x]==self.rank[y]:\n            self.rank[x]+=1\n        self.count -= 1\n\nclass Solution:\n    def findCircleNum(self, M):\n        N = len(M)\n        uf = UnionFind(N)\n        for i in range(N):\n            for j in range(N):\n                if i==j or M[i][j]==0:\n                    continue\n                uf.unite(i, j)\n        return uf.count\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces"}