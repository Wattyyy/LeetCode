{"id":311580546,"lang":"python3","time":"1 year, 4 months","timestamp":1583953314,"status_display":"Accepted","runtime":"228 ms","url":"/submissions/detail/311580546/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"13.8 MB","code":"class Solution:\n    def maximalRectangle(self, matrix):\n        if not matrix:\n            return 0\n        R, C = len(matrix), len(matrix[0])\n        for r in reversed(range(R)):\n            for c in range(C):\n                matrix[r][c] = int(matrix[r][c])\n                if r == R - 1:\n                    continue\n                if matrix[r][c] == 1:\n                    matrix[r][c] = matrix[r+1][c] + 1\n        \n        ans = 0\n        for r in range(R):\n            histgram = matrix[r]\n            idx = 1\n            st = [0]\n            while idx < C:\n                while histgram[st[-1]] > histgram[idx]:\n                    if len(st) == 1:\n                        l_idx = st.pop(-1)\n                        ans = max(ans, idx * histgram[l_idx])\n                        break\n                    l_idx = st.pop(-1)\n                    ans = max(ans, (idx - (st[-1] + 1)) * histgram[l_idx])\n                st.append(idx)\n                idx += 1\n            \n            while 1 < len(st):\n                l_idx = st.pop(-1)\n                ans = max(ans, (C - (st[-1] + 1)) * histgram[l_idx])\n            ans = max(ans, C * histgram[st[-1]])\n        return ans\n\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle"}