// https://leetcode.com/problems/longest-palindromic-substring

from collections import defaultdict
class Solution:
    def longestPalindrome(self, s):
        if not s:
            return ''
        N = len(s)
        dp = defaultdict(bool)
        for i in range(N):
            dp[(i, i)] = True
        for i in reversed(range(N-1)):
            for j in range(i+1, N):
                if i + 1 < j:
                    if dp[(i+1, j-1)] and s[i] == s[j]:
                        dp[(i, j)] = True
                else:
                    if s[i] == s[j]:
                        dp[(i, j)] = True
        # length, (i, j)
        ans = (0, (0, 0))
        for i in range(N):
            for j in range(i, N):
                if dp[(i, j)] and ans[0] < j - i + 1:
                    ans = (j - i + 1, (i, j))
        l, r = ans[1][0], ans[1][1]
        return s[l:r+1]


        