{"id":478032888,"lang":"python3","time":"3Â months","timestamp":1617867925,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/478032888/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"14.4 MB","code":"class Solution:\n    def __init__(self):\n        self.res = []\n        self.mapping = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'], \n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r', 's'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n\n    def backtrack(self, idx, digits, cur):\n        if idx == len(digits):\n            self.res.append(''.join(cur))\n            return\n        else:\n            d = digits[idx]\n            for char in self.mapping[d]:\n                cur.append(char)\n                self.backtrack(idx+1, digits, cur)\n                cur.pop(-1)\n            return\n        \n\n    def letterCombinations(self, digits: str) -> List[str]:\n        if len(digits) == 0:\n            return self.res\n        self.backtrack(0, digits, [])\n        return self.res\n                \n\n            \n","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number"}