{"id":303449997,"lang":"python3","time":"1 year, 4 months","timestamp":1581763126,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/303449997/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"N/A","code":"class Solution:\n    def letterCombinations(self, digits):\n        digits = digits.replace(\"1\", \"\")\n        N = len(digits)\n        output = []\n        d2c = {\n            \"2\": [\"a\", \"b\", \"c\"],\n            \"3\": [\"d\", \"e\", \"f\"],\n            \"4\": [\"g\", \"h\", \"i\"],\n            \"5\": [\"j\", \"k\", \"l\"],\n            \"6\": [\"m\", \"n\", \"o\"],\n            \"7\": [\"p\", \"q\", \"r\", \"s\"],\n            \"8\": [\"t\", \"u\", \"v\"],\n            \"9\": [\"w\", \"x\", \"y\", \"z\"]\n              }\n        \n        def backtrack(first=0, cur_str=[]):\n            if len(cur_str) == N:\n                output.append(\"\".join(cur_str))\n            else:\n                d = digits[first]\n                for char in d2c[d]:\n                    cur_str.append(char)\n                    backtrack(first+1, cur_str)\n                    cur_str.pop()\n        \n        backtrack()\n        return output","compare_result":"1011111111111111111111111","title_slug":"letter-combinations-of-a-phone-number"}